[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Prácticas de Bioestadística con R",
    "section": "",
    "text": "Prefacio\n¡Bienvenido a Prácticas de Bioestadística con R!\nEste libro presenta una recopilación de prácticas de Bioestadística Descriptiva e Inferencial con el lenguaje de programación R, con problemas aplicados a las Ciencias de la Salud.\nNo es un libro para aprender a programar con R, ya que solo enseña el uso del lenguaje y de algunos de sus paquetes para resolver problemas de Bioestadística. Para quienes estén interesados en aprender a programar en este lenguaje, os recomiendo leer este manual de R.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#capítulos",
    "href": "index.html#capítulos",
    "title": "Prácticas de Bioestadística con R",
    "section": "Capítulos",
    "text": "Capítulos\n\nIntroducción a R\nTipos y estructuras de datos\nPreprocesamiento de datos\nDistribuciones de frecuencias y representaciones gráficas\nEstadística descriptiva",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "index.html#licencia",
    "href": "index.html#licencia",
    "title": "Prácticas de Bioestadística con R",
    "section": "Licencia",
    "text": "Licencia\nEsta obra está bajo una licencia Reconocimiento – No comercial – Compartir bajo la misma licencia 3.0 España de Creative Commons. Para ver una copia de esta licencia, visite https://creativecommons.org/licenses/by-nc-sa/3.0/es/.\nCon esta licencia eres libre de:\n\nCopiar, distribuir y mostrar este trabajo.\nRealizar modificaciones de este trabajo.\n\nBajo las siguientes condiciones:\n\nReconocimiento. Debe reconocer los créditos de la obra de la manera especificada por el autor o el licenciador (pero no de una manera que sugiera que tiene su apoyo o apoyan el uso que hace de su obra).\nNo comercial. No puede utilizar esta obra para fines comerciales.\nCompartir bajo la misma licencia. Si altera o transforma esta obra, o genera una obra derivada, sólo puede distribuir la obra generada bajo una licencia idéntica a ésta.\n\nAl reutilizar o distribuir la obra, tiene que dejar bien claro los términos de la licencia de esta obra.\nEstas condiciones pueden no aplicarse si se obtiene el permiso del titular de los derechos de autor.\nNada en esta licencia menoscaba o restringe los derechos morales del autor.",
    "crumbs": [
      "Prefacio"
    ]
  },
  {
    "objectID": "01-intro.html",
    "href": "01-intro.html",
    "title": "1  Introducción a R",
    "section": "",
    "text": "1.1 Instalación de R\nLa gran potencia de cómputo alcanzada por los ordenadores ha convertido a los mismos en poderosas herramientas al servicio de todas aquellas disciplinas que, como la Estadística, requieren manejar un gran volumen de datos. Actualmente, prácticamente nadie se plantea hacer un estudio estadístico serio sin la ayuda de un buen programa de análisis de datos.\nR es un potente lenguaje de programación que incluye multitud de funciones para la representación y el análisis de datos. Fue desarrollado por Robert Gentleman y Ross Ihaka en la Universidad de Auckland en Nueva Zelanda, aunque actualmente es mantenido por una enorme comunidad científica en todo el mundo.\nLas ventajas de R frente a otros programas habituales de análisis de datos, como pueden ser SPSS, SAS o Matlab, son múltiples:\nR puede descargarse desde el sitio web oficial de R o desde el repositorio principal de paquetes de R CRAN. Basta con descargar el archivo de instalación correspondiente al sistema operativo de nuestro ordenador y realizar la instalación como cualquier otro programa.\nEl intérprete de R se arranca desde la terminal, aunque en Windows incorpora su propia aplicación, pero es muy básica. En general, para trabajos serios, conviene utilizar un entorno de desarrollo para R.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "01-intro.html#entornos-de-desarrollo",
    "href": "01-intro.html#entornos-de-desarrollo",
    "title": "1  Introducción a R",
    "section": "1.2 Entornos de desarrollo",
    "text": "1.2 Entornos de desarrollo\nPor defecto el entorno de trabajo de R es en línea de comandos, lo que significa que los cálculos y los análisis se realizan mediante comandos o instrucciones que el usuario teclea en una ventana de texto. No obstante, existen distintas interfaces gráficas de usuario que facilitan su uso, sobre todo para usuarios noveles. Algunas de ellas, como las que se enumeran a continuación, son completos entornos de desarrollo que facilitan la gestión de cualquier proyecto:\n\nRStudio. Probablemente el entorno de desarrollo más extendido para programar con R ya que incorpora multitud de utilidades para facilitar la programación con R.\n\n\n\n\nEntorno de desarrollo RStudio\n\n\n\nRKWard. Es otra otro de los entornos de desarrollo más completos que además incluye a posibilidad de añadir nuevos menús y cuadros de diálogo personalizados.\n\n\n\n\nEntorno de desarrollo RKWard\n\n\n\nJupyter Lab. Es un entorno de desarrollo interactivo que permite la creación de documentos que contienen código, texto, gráficos. Aunque no es un entorno de desarrollo específico para R, incluye un kernel para R que permite ejecutar código R en los documentos.\n\n\n\n\nEntorno de desarrollo Jupyter Lab\n\n\n\nVisual Studio Code. Es un entorno de desarrollo de propósito general ampliamente extendido. Aunque no es un entorno de desarrollo específico para R, incluye una extensión con utilidades que facilitan mucho el desarrollo con R.\n\n\n\n\nEntorno de desarrollo Visual Studio Code",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "01-intro.html#instalación-de-paquetes",
    "href": "01-intro.html#instalación-de-paquetes",
    "title": "1  Introducción a R",
    "section": "1.3 Instalación de paquetes",
    "text": "1.3 Instalación de paquetes\nR es un lenguaje de programación modular, lo que significa que su funcionalidad se extiende mediante paquetes. Los paquetes son colecciones de funciones, datos y documentación sobre el uso de esas funciones o conjuntos de datos.\nEl repositorio de paquetes más importante es CRAN (Comprehensive R Archive Network), pero existen otros repositorios como Bioconductor que contiene paquetes específicos para el análisis de datos biológicos.\n\n1.3.1 Instalación de paquetes desde CRAN\nPara instalar un paquete en R basta con ejecutar la función install.packages() con el nombre del paquete que se desea instalar. Por ejemplo, para instalar el paquete ggplot2 que es uno de los paquetes más utilizados para realizar gráficos en R, basta con ejecutar el siguiente comando:\ninstall.packages(\"ggplot2\")\nLos ubicación de los paquete instalados en R depende del sistema operativo, pero puede consultarse en la variable .libPaths().\n\n\n1.3.2 Instalación de paquetes desde Bioconductor\nPara instalar un paquete desde Bioconductor es necesario instalar primero el paquete BiocManager y después utilizar la función BiocManager::install() con el nombre del paquete que se desea instalar. Por ejemplo, para instalar el paquete DESeq2 que es uno de los paquetes más utilizados para el análisis de datos de expresión génica, basta con ejecutar el siguiente comando:\ninstall.packages(\"BiocManager\")\nBiocManager::install(\"DESeq2\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "01-intro.html#actualización-de-paquetes",
    "href": "01-intro.html#actualización-de-paquetes",
    "title": "1  Introducción a R",
    "section": "1.4 Actualización de paquetes",
    "text": "1.4 Actualización de paquetes\nCada cierto tiempo conviene actualizar los paquetes instalados en R para asegurarse de que se dispone de las últimas versiones de los mismos. Para ello se puede utilizar la función update.packages(). Por ejemplo, para actualizar todos los paquetes instalados en R sin necesidad de confirmación por parte del usuario, basta con ejecutar el siguiente comando:\nupdate.packages(ask = FALSE)",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introducción a R</span>"
    ]
  },
  {
    "objectID": "02-tipos-datos.html",
    "href": "02-tipos-datos.html",
    "title": "\n2  Tipos y estructuras de datos\n",
    "section": "",
    "text": "2.1 Ejercicios Resueltos\nEsta práctica contiene ejercicios que muestran cómo trabajar con los tipos y estructuras de datos en R. En concreto, las estructuras de datos que se utilizan son\nPara la realización de esta práctica se requieren los siguientes paquetes.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos y estructuras de datos</span>"
    ]
  },
  {
    "objectID": "02-tipos-datos.html#ejercicios-resueltos",
    "href": "02-tipos-datos.html#ejercicios-resueltos",
    "title": "\n2  Tipos y estructuras de datos\n",
    "section": "",
    "text": "library(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\nlibrary(knitr) # Para el formateo de tablas.\n\nEjercicio 2.1 Realizar las siguientes operaciones con vectores.\n\n\nCrear un vector con los números del 1 al 10.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nFunción c\nOperador :\n\n\n\nLa función c() permite combinar elementos en un vector. Los elementos se introducen separados por comas.\n\nnumeros &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\nnumeros\n\nNA  [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\nEl operador inicio:fin permite crear un vector con la secuencia de números enteros desde el número inicio hasta el número fin.\n\nnumeros &lt;- 1:10\nnumeros\n\nNA  [1]  1  2  3  4  5  6  7  8  9 10\n\n\n\n\n\n\n\n\n\n\nMostrar el número de elementos del vector anterior.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlength(numeros)\n\nNA [1] 10\n\n\n\n\n\n\n\nCrear un vector con los números pares del 1 al 10.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nFunción c\nFunción seq\n\n\n\n\npares &lt;- c(2, 4, 6, 8, 10)\npares\n\nNA [1]  2  4  6  8 10\n\n\n\n\nLa función seq(inicio, fin, salto) permite crear un vector con la secuencia de números enteros desde el número inicio hasta el número fin con un salto de salto.\n\npares &lt;- seq(2, 10, by = 2)\npares\n\nNA [1]  2  4  6  8 10\n\n\n\n\n\n\n\n\n\n\nCrear un vector con el cuadrado de los elementos del vector anterior.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nEl operador ^ permite elevar un número a otro. Cuando se aplica a un vector, eleva cada elemento del vector al número indicado.\n\ncuadrados &lt;- pares^2\ncuadrados\n\nNA [1]   4  16  36  64 100\n\n\n\n\n\n\n\nCrear un vector con 5 números aleatorios entre 1 y 10.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función sample(vector, n) permite seleccionar n elementos aleatorios de vector. El muestreo es sin reemplazamiento.\n\naleatorios &lt;- sample(1:10, 5)\naleatorios\n\nNA [1] 10  2  8  5  3\n\n\n\n\n\n\n\nCrear un vector booleano con los números del vector anterior que son pares.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nEl operador %% permite calcular el resto de la división entera de dos números. Si el resto es 0, el número es par. Y el operador == permite comparar dos vectores elemento a elemento.\n\npar &lt;- aleatorios%%2 == 0\npar\n\nNA [1]  TRUE  TRUE  TRUE FALSE FALSE\n\n\n\n\n\n\n\nCrear un vector con 100 números aleatorios entre 0 y 1.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función runif(n, min, max) permite generar n números aleatorios entre min y max.\n\naleatorios2 &lt;- runif(100, 0, 1)\naleatorios2\n\nNA   [1] 0.70093134 0.51444436 0.50033851 0.49987841 0.99258584\nNA   [6] 0.37709242 0.92929447 0.87719605 0.03362775 0.56437373\nNA  [11] 0.35755724 0.50158498 0.87151782 0.43747243 0.80047219\nNA  [16] 0.25124476 0.74694249 0.82391348 0.84133458 0.87623783\nNA  [21] 0.04416926 0.25074276 0.23909836 0.26258453 0.22961854\nNA  [26] 0.74017511 0.19177061 0.78734779 0.89383176 0.15679040\nNA  [31] 0.44604168 0.12793957 0.03023479 0.70798219 0.01011875\nNA  [36] 0.15727406 0.50480045 0.56736403 0.60148096 0.53303988\nNA  [41] 0.53277980 0.41383721 0.49309501 0.95583698 0.81072503\nNA  [46] 0.62039387 0.55980391 0.68179498 0.58456358 0.24298017\nNA  [51] 0.70207234 0.35686812 0.85999598 0.21209034 0.40370831\nNA  [56] 0.25729871 0.50427730 0.48879563 0.90879583 0.52323296\nNA  [61] 0.29050201 0.25853896 0.71250034 0.51605030 0.53960834\nNA  [66] 0.23115014 0.66190638 0.47195067 0.81732680 0.97760659\nNA  [71] 0.82615265 0.30859989 0.79783699 0.72148746 0.33380386\nNA  [76] 0.42344802 0.48933247 0.16954620 0.13549628 0.18877436\nNA  [81] 0.71079402 0.16807544 0.63775337 0.96125977 0.57931077\nNA  [86] 0.29379083 0.52128579 0.27138711 0.19826331 0.52057025\nNA  [91] 0.43146344 0.61369545 0.37892275 0.88289328 0.80196008\nNA  [96] 0.80441395 0.95454964 0.16287340 0.34361011 0.37291295\n\n\n\n\n\n\n\nOrdenar el vector anterior de menor a mayor.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función sort(vector) permite ordenar los elementos de un vector de menor a mayor.\n\nsort(aleatorios2)\n\nNA   [1] 0.01011875 0.03023479 0.03362775 0.04416926 0.12793957\nNA   [6] 0.13549628 0.15679040 0.15727406 0.16287340 0.16807544\nNA  [11] 0.16954620 0.18877436 0.19177061 0.19826331 0.21209034\nNA  [16] 0.22961854 0.23115014 0.23909836 0.24298017 0.25074276\nNA  [21] 0.25124476 0.25729871 0.25853896 0.26258453 0.27138711\nNA  [26] 0.29050201 0.29379083 0.30859989 0.33380386 0.34361011\nNA  [31] 0.35686812 0.35755724 0.37291295 0.37709242 0.37892275\nNA  [36] 0.40370831 0.41383721 0.42344802 0.43146344 0.43747243\nNA  [41] 0.44604168 0.47195067 0.48879563 0.48933247 0.49309501\nNA  [46] 0.49987841 0.50033851 0.50158498 0.50427730 0.50480045\nNA  [51] 0.51444436 0.51605030 0.52057025 0.52128579 0.52323296\nNA  [56] 0.53277980 0.53303988 0.53960834 0.55980391 0.56437373\nNA  [61] 0.56736403 0.57931077 0.58456358 0.60148096 0.61369545\nNA  [66] 0.62039387 0.63775337 0.66190638 0.68179498 0.70093134\nNA  [71] 0.70207234 0.70798219 0.71079402 0.71250034 0.72148746\nNA  [76] 0.74017511 0.74694249 0.78734779 0.79783699 0.80047219\nNA  [81] 0.80196008 0.80441395 0.81072503 0.81732680 0.82391348\nNA  [86] 0.82615265 0.84133458 0.85999598 0.87151782 0.87623783\nNA  [91] 0.87719605 0.88289328 0.89383176 0.90879583 0.92929447\nNA  [96] 0.95454964 0.95583698 0.96125977 0.97760659 0.99258584\n\n\n\n\n\n\n\nOrdenar el vector anterior de mayor a menor.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función sort(vector, decreasing = TRUE) permite ordenar los elementos de un vector de mayor a menor.\n\nsort(aleatorios2, decreasing = TRUE)\n\nNA   [1] 0.99258584 0.97760659 0.96125977 0.95583698 0.95454964\nNA   [6] 0.92929447 0.90879583 0.89383176 0.88289328 0.87719605\nNA  [11] 0.87623783 0.87151782 0.85999598 0.84133458 0.82615265\nNA  [16] 0.82391348 0.81732680 0.81072503 0.80441395 0.80196008\nNA  [21] 0.80047219 0.79783699 0.78734779 0.74694249 0.74017511\nNA  [26] 0.72148746 0.71250034 0.71079402 0.70798219 0.70207234\nNA  [31] 0.70093134 0.68179498 0.66190638 0.63775337 0.62039387\nNA  [36] 0.61369545 0.60148096 0.58456358 0.57931077 0.56736403\nNA  [41] 0.56437373 0.55980391 0.53960834 0.53303988 0.53277980\nNA  [46] 0.52323296 0.52128579 0.52057025 0.51605030 0.51444436\nNA  [51] 0.50480045 0.50427730 0.50158498 0.50033851 0.49987841\nNA  [56] 0.49309501 0.48933247 0.48879563 0.47195067 0.44604168\nNA  [61] 0.43747243 0.43146344 0.42344802 0.41383721 0.40370831\nNA  [66] 0.37892275 0.37709242 0.37291295 0.35755724 0.35686812\nNA  [71] 0.34361011 0.33380386 0.30859989 0.29379083 0.29050201\nNA  [76] 0.27138711 0.26258453 0.25853896 0.25729871 0.25124476\nNA  [81] 0.25074276 0.24298017 0.23909836 0.23115014 0.22961854\nNA  [86] 0.21209034 0.19826331 0.19177061 0.18877436 0.16954620\nNA  [91] 0.16807544 0.16287340 0.15727406 0.15679040 0.13549628\nNA  [96] 0.12793957 0.04416926 0.03362775 0.03023479 0.01011875\n\n\n\n\n\n\n\nCrear un vector con los días laborables de la semana.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndias_laborables &lt;- c(\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\")\ndias_laborables\n\nNA [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"\n\n\n\n\n\n\n\nAñadir los días del fin de semana al vector anterior y guardar el resultado en una nueva variable.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndias &lt;- c(dias_laborables, \"Sábado\", \"Domingo\")\ndias\n\nNA [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \nNA [6] \"Sábado\"    \"Domingo\"\n\n\n\n\n\n\n\nAcceder al tercer elemento del vector.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndias_laborables[3]\n\nNA [1] \"Miércoles\"\n\n\n\n\n\n\n\nSeleccionar los días pares del vector.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nÍndices numéricos\nÍndices numéricos negativos\nÍndices lógicos\n\n\n\n\ndias[c(2, 4, 6)]\n\nNA [1] \"Martes\" \"Jueves\" \"Sábado\"\n\n\n\n\n\ndias[-c(1, 3, 5, 7)]\n\nNA [1] \"Martes\" \"Jueves\" \"Sábado\"\n\n\n\n\n\ndias[c(FALSE, TRUE)]\n\nNA [1] \"Martes\" \"Jueves\" \"Sábado\"\n\n\n\n\n\n\n\n\n\n\nConcatenar los elementos del vector en una cadena de texto.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función paste(vector, collapse = \" \") permite concatenar los elementos de un vector en una cadena de texto separados por un espacio.\n\npaste(dias, collapse = \" \")\n\nNA [1] \"Lunes Martes Miércoles Jueves Viernes Sábado Domingo\"\n\n\n\n\n\n\n\nConcatenar los elementos del vector en una cadena de texto separados por comas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsemana &lt;- paste(dias, collapse = \", \")\nsemana\n\nNA [1] \"Lunes, Martes, Miércoles, Jueves, Viernes, Sábado, Domingo\"\n\n\n\n\n\n\n\nDividir la cadena anterior en subcadenas usando como separador la coma.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función strsplit(cadena, separador) permite dividir una cadena de texto en subcadenas usando como separador el valor de separador.\n\nstrsplit(semana, \", \")\n\nNA [[1]]\nNA [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \nNA [6] \"Sábado\"    \"Domingo\"\n\n\n\n\n\n\n\n\n\nEjercicio 2.2 Se ha tomado una muestra de alumnos de una clase y se ha recogido la información sobre el sexo de los alumnos obteniendo los siguientes datos:\n\\[\n\\mbox{Mujer, Hombre, Mujer, Hombre, Mujer, Mujer, Hombre, Hombre}\n\\]\n\n\nCrear un vector con los datos de la muestra.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsexo &lt;- c(\"Mujer\", \"Hombre\", \"Mujer\", \"Hombre\", \"Mujer\", \"Mujer\", \"Hombre\",\n    \"Hombre\")\nsexo\n\nNA [1] \"Mujer\"  \"Hombre\" \"Mujer\"  \"Hombre\" \"Mujer\"  \"Mujer\"  \"Hombre\"\nNA [8] \"Hombre\"\n\n\n\n\n\n\n\nConvertir el vector anterior en un factor.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función factor(vector, labels) permite convertir vector en un factor con los niveles o categorías especificados en labels. Si no se indica labels, los niveles se toman de los elementos del vector y se ordenan alfabéticamente.\n\nsexo &lt;- factor(sexo)\nsexo\n\nNA [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\nNA Levels: Hombre Mujer\n\n\n\n\n\n\n\nMostrar los niveles del factor.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función levels(factor) permite mostrar los niveles del factor factor.\n\nlevels(sexo)\n\nNA [1] \"Hombre\" \"Mujer\"\n\n\n\n\n\n\n\nReordenar los niveles del factor para que la categoría “Mujer” sea la primera.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nsexo &lt;- factor(sexo, levels = c(\"Mujer\", \"Hombre\"))\nsexo\n\nNA [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\nNA Levels: Mujer Hombre\n\n\n\n\n\n\n\n\n\nEjercicio 2.3 Realizar las siguientes operaciones con matrices.\n\n\nCrear una matriz de 2 filas y 2 columnas con los números del 1 al 4.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función matrix(vector, nrow, ncol) permite crear una matriz con los datos de vector el número de filas indicado en nrow y el número de columnas indicado en ncol.\n\nA &lt;- matrix(1:4, nrow = 2, ncol = 2)\nA\n\nNA      [,1] [,2]\nNA [1,]    1    3\nNA [2,]    2    4\n\n\n\n\n\n\n\nAñadir a la matriz anterior una nueva columna con los números del 5 y 6.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función cbind(matriz, vector) permite añadir una nueva columna a la matriz matriz con los datos de vector.\n\nA &lt;- cbind(A, 5:6)\nA\n\nNA      [,1] [,2] [,3]\nNA [1,]    1    3    5\nNA [2,]    2    4    6\n\n\n\n\n\n\n\nCrear una matriz de 2 filas y 2 columnas con los números del 1 al 4, rellenando los elementos por filas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función matrix rellena los elementos de la matriz por columnas. Para rellenar los elementos por filas, se puede utilizar el parámetro opcional byrow = TRUE.\n\nB &lt;- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)\nB\n\nNA      [,1] [,2]\nNA [1,]    1    2\nNA [2,]    3    4\n\n\n\n\n\n\n\nCrear otra matriz a partir de la anterior añadiendo una fila con los números 5 y 6.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nB &lt;- rbind(B, 5:6)\nB\n\nNA      [,1] [,2]\nNA [1,]    1    2\nNA [2,]    3    4\nNA [3,]    5    6\n\n\n\n\n\n\n\nAcceder al elemento de la segunda fila y la primera columna de la matriz anterior.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nB[2, 1]\n\nNA [1] 3\n\n\n\n\n\n\n\nSeleccionar la primera fila de la matriz.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nB[1, ]\n\nNA [1] 1 2\n\n\n\n\n\n\n\nSeleccionar la segunda columna de la matriz.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nB[, 2]\n\nNA [1] 2 4 6\n\n\n\n\n\n\n\nMultiplicar la matriz A por la matriz B.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa multiplicación de matrices se realiza con el operador %*%.\n\nA %*% B\n\nNA      [,1] [,2]\nNA [1,]   35   44\nNA [2,]   44   56\n\n\n\n\n\n\n\nCalcular la transpuesta de la matriz A.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función t(matriz) permite calcular la transpuesta de matriz.\n\nt(A)\n\nNA      [,1] [,2]\nNA [1,]    1    2\nNA [2,]    3    4\nNA [3,]    5    6\n\n\n\n\n\n\n\n\n\nEjercicio 2.4 Realizar las siguientes operaciones con listas.\n\n\nCrear una lista con los siguientes con los datos del siguiente alumno:\n\nNombre: Juan.\nEdad: 20 años.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara crear una lista se utiliza la función list(nombre1 = valor1, nombre2 = valor2, ...).\n\nalumno &lt;- list(Nombre = \"Juan\", Edad = 20)\nalumno\n\nNA $Nombre\nNA [1] \"Juan\"\nNA \nNA $Edad\nNA [1] 20\n\n\n\n\n\n\n\nObtener la edad del alumno.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara acceder a los elementos de una lista se utiliza el operador $.\n\nalumno$Edad\n\nNA [1] 20\n\n\n\n\n\n\n\nCrear una lista con las siguientes notas del alumno:\n\nMatemáticas: 7.\nQuímica: 8.\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nnotas &lt;- list(Matemáticas = 7, Química = 8)\nnotas\n\nNA $Matemáticas\nNA [1] 7\nNA \nNA $Química\nNA [1] 8\n\n\n\n\n\n\n\nAñadir la lista de notas a la lista del alumno.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nalumno$Notas &lt;- notas\nalumno\n\nNA $Nombre\nNA [1] \"Juan\"\nNA \nNA $Edad\nNA [1] 20\nNA \nNA $Notas\nNA $Notas$Matemáticas\nNA [1] 7\nNA \nNA $Notas$Química\nNA [1] 8\n\n\n\n\n\n\n\nAñadir a la lista anterior la nota del examen de Física, que ha sido un 6.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nalumno$Notas$Física &lt;- 6\nalumno\n\nNA $Nombre\nNA [1] \"Juan\"\nNA \nNA $Edad\nNA [1] 20\nNA \nNA $Notas\nNA $Notas$Matemáticas\nNA [1] 7\nNA \nNA $Notas$Química\nNA [1] 8\nNA \nNA $Notas$Física\nNA [1] 6\n\n\n\n\n\n\n\n\n\nEjercicio 2.5 La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\n\nFigura:\n\n\n\n\nCrear un data frame con los datos de la tabla.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara crear un data frame se utiliza la función data.frame(columna1 = vector1, columna2 = vector2, ...), donde columna1, columna2, … son los nombres de las columnas y vector1, vector2, … son los vectores con los datos de cada columna, que deben tener la misma longitud.\n\ndf &lt;- data.frame(Mes = c(\"Enero\", \"Febrero\", \"Marzo\"), Ingresos = c(45000,\n    41500, 51200), Gastos = c(33400, 35400, 35600))\ndf\n\n\n\n\nMes\nIngresos\nGastos\n\n\n\nEnero\n45000\n33400\n\n\nFebrero\n41500\n35400\n\n\nMarzo\n51200\n35600\n\n\n\n\nFigura:\n\n\n\n\n\n\n\nAñadir una nueva columna con los siguientes impuestos pagados.\n\n\n\n\nMes\nImpuestos\n\n\n\nEnero\n6450\n\n\nFebrero\n6300\n\n\nMarzo\n7100\n\n\n\nFigura:\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$Impuestos &lt;- c(6450, 6300, 7100)\ndf\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\n\n\nFigura:\n\n\n\n\nCon las funciones del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt;\n    mutate(Impuestos = c(6450, 6300, 7100))\ndf\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\n\n\nFigura:\n\n\n\n\n\n\n\n\n\n\nAñadir una nueva fila con los siguientes datos de Abril.\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\nAbril\n49700\n36300\n6850\n\n\nFigura:\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf &lt;- rbind(df, list(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))\ndf\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\nAbril\n49700\n36300\n6850\n\n\n\n\nFigura:\n\n\n\n\nCon las funciones del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt;\n    add_row(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)\ndf\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\nAbril\n49700\n36300\n6850\n\n\n\n\nFigura:\n\n\n\n\n\n\n\n\n\n\nCambiar los ingresos de Marzo por 50400.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf[3, \"Ingresos\"] &lt;- 50400\ndf\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n50400\n35600\n7100\n\n\nAbril\n49700\n36300\n6850\n\n\n\n\nFigura:\n\n\n\n\n\n\n\nGuardar el data frame en un fichero csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función write.csv(dataframe, \"fichero.csv\") permite guardar el data frame dataframe en el fichero fichero.csv.\n\nwrite.csv(df, \"datos/ingresos_gastos.csv\", row.names = FALSE)\n\n\n\n\n\n\n\n\nEjercicio 2.6 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv y mostrar las primeras filas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R. La función read.csv(\"fichero.csv\") permite leer un fichero csv y cargar los datos en un data frame. Y la función head(dataframe) permite mostrar las primeras filas del data frame dataframe.\n\ndf &lt;- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\nhead(df)\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\nJosé Luis Martínez Izquierdo\n18\nH\n85\n1.79\n182\n\n\nRosa Díaz Díaz\n32\nM\n65\n1.73\n232\n\n\nJavier García Sánchez\n24\nH\nNA\n1.81\n191\n\n\nCarmen López Pinzón\n35\nM\n65\n1.70\n200\n\n\nMarisa López Collado\n46\nM\n51\n1.58\n148\n\n\nAntonio Ruiz Cruz\n68\nH\n66\n1.74\n249\n\n\n\n\nFigura:\n\n\n\n\nCon la función read_csv del paquete del paquete readr de tidyverse.\n\ndf &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\nhead(df)\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\nJosé Luis Martínez Izquierdo\n18\nH\n85\n1.79\n182\n\n\nRosa Díaz Díaz\n32\nM\n65\n1.73\n232\n\n\nJavier García Sánchez\n24\nH\nNA\n1.81\n191\n\n\nCarmen López Pinzón\n35\nM\n65\n1.70\n200\n\n\nMarisa López Collado\n46\nM\n51\n1.58\n148\n\n\nAntonio Ruiz Cruz\n68\nH\n66\n1.74\n249\n\n\n\n\nFigura:\n\n\n\n\n\n\n\n\n\n\nMostrar las variables del data frame.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ncolnames(df)\n\nNA [1] \"nombre\"     \"edad\"       \"sexo\"       \"peso\"       \"altura\"    \nNA [6] \"colesterol\"\n\n\n\n\nCon la función glimpse del paquete dplyr de tidyverse. Esta función muestra las columnas del data frame en filas, de manera que permite ver todas las columnas de un data frame cuando este tiene muchas columnas.\n\nglimpse(df)\n\nNA Rows: 14\nNA Columns: 6\nNA $ nombre     &lt;chr&gt; \"José Luis Martínez Izquierdo\", \"Rosa Díaz Díaz\",…\nNA $ edad       &lt;dbl&gt; 18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 2…\nNA $ sexo       &lt;chr&gt; \"H\", \"M\", \"H\", \"M\", \"M\", \"H\", \"H\", \"M\", \"H\", \"H\",…\nNA $ peso       &lt;dbl&gt; 85, 65, NA, 65, 51, 66, 62, 60, 90, 75, 55, 78, 1…\nNA $ altura     &lt;dbl&gt; 1.79, 1.73, 1.81, 1.70, 1.58, 1.74, 1.72, 1.66, 1…\nNA $ colesterol &lt;dbl&gt; 182, 232, 191, 200, 148, 249, 276, NA, 241, 280, …\n\n\n\n\n\n\n\n\n\n\nMostrar el número de filas del data frame, que corresponde al número de pacientes.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nLa función nrow(dataframe) permite mostrar el número de filas del data frame dataframe.\n\nnrow(df)\n\nNA [1] 14\n\n\n\n\n\n\n\nMostrar 5 filas aleatorias del data frame.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nLa función sample(vector, n) permite seleccionar n elementos aleatorios de vector. El muestreo es sin reemplazamiento.\n\ndf[sample(nrow(df), 5), ]\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109\n1.98\n210\n\n\nMacarena Álvarez Luna\n53\nM\n55\n1.62\n262\n\n\nMarisa López Collado\n46\nM\n51\n1.58\n148\n\n\nSantiago Reillo Manzano\n46\nH\n75\n1.85\n280\n\n\nPilar Martín González\n22\nM\n60\n1.66\nNA\n\n\n\n\nFigura:\n\n\n\n\nLa función sample_n(dataframe, n) del paquete dplyr de tidyverse permite seleccionar n filas aleatorias del data frame dataframe.\n\ndf |&gt;\n    sample_n(5)\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n\nSantiago Reillo Manzano\n46\nH\n75\n1.85\n280\n\n\nPilar Martín González\n22\nM\n60\n1.66\nNA\n\n\nMiguel Angel Cuadrado Gutiérrez\n27\nH\n109\n1.98\n210\n\n\nRosa Díaz Díaz\n32\nM\n65\n1.73\n232\n\n\nCarmen López Pinzón\n35\nM\n65\n1.70\n200\n\n\n\n\nFigura:\n\n\n\n\n\n\n\n\n\n\nObtener los datos de colesterol de los pacientes.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$colesterol\n\nNA  [1] 182 232 191 200 148 249 276  NA 241 280 262 198 210 194\n\n\n\n\nCon la función select del paquete dplyr de tidyverse.\n\ndf |&gt;\n    select(colesterol)\n\n\n\n\ncolesterol\n\n\n\n182\n\n\n232\n\n\n191\n\n\n200\n\n\n148\n\n\n249\n\n\n276\n\n\nNA\n\n\n241\n\n\n280\n\n\n262\n\n\n198\n\n\n210\n\n\n194\n\n\n\n\nFigura:\n\n\n\n\n\n\n\n\n\n\nObtener los datos del quinto paciente.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[5, ]\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\nMarisa López Collado\n46\nM\n51\n1.58\n148\n\n\n\nFigura:\n\n\n\n\nCon la función slice del paquete dplyr de tidyverse.\n\ndf |&gt;\n    slice(5)\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\nMarisa López Collado\n46\nM\n51\n1.58\n148\n\n\n\nFigura:",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos y estructuras de datos</span>"
    ]
  },
  {
    "objectID": "02-tipos-datos.html#ejercicios-propuestos",
    "href": "02-tipos-datos.html#ejercicios-propuestos",
    "title": "\n2  Tipos y estructuras de datos\n",
    "section": "\n2.2 Ejercicios Propuestos",
    "text": "2.2 Ejercicios Propuestos\n\nEjercicio 2.7 La siguiente tabla contiene las notas de un grupo de alumnos en dos asignaturas.\n\n\n\n\nAlumno\nGrupo\nFísica\nQuímica\n\n\n\nJuan\nA\n7.0\n6.7\n\n\nMaría\nB\n3.5\n5.0\n\n\nPedro\nB\n6.0\n7.1\n\n\nAna\nA\n5.2\n4.5\n\n\nLuis\nA\n4.5\nNA\n\n\nSara\nB\n9.0\n9.2\n\n\n\nFigura:\n\n\n\nCrear un vector con los nombres de los alumnos.\nCrear un factor el grupo.\nCrear un vector con las notas de Física y otro con las notas de Química.\nCrear un vector con la nota media de las dos asignaturas.\nCrear un vector booleano con los alumnos que han aprobado el curso. Para aprobar el curso, la nota media de las dos asignaturas debe ser mayor o igual a 5.\nCrear un vector con los nombres de los alumnos que han aprobado el curso.\nCrear un data frame con los nombres de los alumnos, sus notas y su media reutilizando los vectores anteriores.\nGuardar el data frame en un fichero csv.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Tipos y estructuras de datos</span>"
    ]
  },
  {
    "objectID": "03-preprocesamiento-datos.html",
    "href": "03-preprocesamiento-datos.html",
    "title": "\n3  Preprocesamiento de datos\n",
    "section": "",
    "text": "3.1 Ejercicios Resueltos\nEsta práctica contiene ejercicios que muestran como preprocesar un conjunto de datos en R. El preprocesamiento de datos es una tarea fundamental en el análisis de datos que consiste en la limpieza, transformación y preparación de los datos para su análisis. El preprocesamiento de datos incluye tareas como\nPara la realización de esta práctica se requieren los siguientes paquetes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "03-preprocesamiento-datos.html#ejercicios-resueltos",
    "href": "03-preprocesamiento-datos.html#ejercicios-resueltos",
    "title": "\n3  Preprocesamiento de datos\n",
    "section": "",
    "text": "library(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n# - lubridate: para el procesamiento de fechas.\nlibrary(knitr) # Para el formateo de tablas.\n\nEjercicio 3.1 La siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\n\n\n\nMes\nIngresos\nGastos\nImpuestos\n\n\n\nEnero\n45000\n33400\n6450\n\n\nFebrero\n41500\n35400\n6300\n\n\nMarzo\n51200\n35600\n7100\n\n\nAbril\n49700\n36300\n6850\n\n\n\n\n\n\n\nCrear un data frame con los datos de la tabla.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf &lt;- data.frame(\n    Mes = c(\"Enero\", \"Febrero\", \"Marzo\", \"Abril\"),\n    Ingresos = c(45000, 41500, 51200, 49700),\n    Gastos = c(33400, 35400, 35600, 36300),\n    Impuestos = c(6450, 6300, 7100, 6850)\n    )\ndf \n\n      Mes Ingresos Gastos Impuestos\n1   Enero    45000  33400      6450\n2 Febrero    41500  35400      6300\n3   Marzo    51200  35600      7100\n4   Abril    49700  36300      6850\n\n\n\n\n\n\n\nCrear una nueva columna con los beneficios de cada mes (ingresos - gastos - impuestos).\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$Beneficios &lt;- df$Ingresos - df$Gastos - df$Impuestos\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios\n1   Enero    45000  33400      6450       5150\n2 Febrero    41500  35400      6300       -200\n3   Marzo    51200  35600      7100       8500\n4   Abril    49700  36300      6850       6550\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse. La función mutate permite añadir nuevas columnas a un data frame mediante una fórmula puede hacer referencia a las columnas existentes.\n\nlibrary(tidyverse)\ndf &lt;- df |&gt;\n    mutate(Beneficios = Ingresos - Gastos - Impuestos)\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios\n1   Enero    45000  33400      6450       5150\n2 Febrero    41500  35400      6300       -200\n3   Marzo    51200  35600      7100       8500\n4   Abril    49700  36300      6850       6550\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con el factor Balance con dos posibles categorías: positivo si ha habido beneficios y negativo si ha habido pérdidas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función cut del paquete base de R. La función cut(vector, breaks, labels) divide el vector vector en intervalos delimitados por los elementos del vector breaks y crea un factor asignando a cada intervalo una etiqueta del vector labels.\n\ndf$Balance &lt;- cut(df$Beneficios, breaks = c(-Inf, 0, Inf), labels = c(\"negativo\", \"positivo\"))\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios  Balance\n1   Enero    45000  33400      6450       5150 positivo\n2 Febrero    41500  35400      6300       -200 negativo\n3   Marzo    51200  35600      7100       8500 positivo\n4   Abril    49700  36300      6850       6550 positivo\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt;\n    mutate(Balance = cut(Beneficios, breaks = c(-Inf, 0, Inf), labels = c(\"negativo\", \"positivo\")))\ndf\n\n      Mes Ingresos Gastos Impuestos Beneficios  Balance\n1   Enero    45000  33400      6450       5150 positivo\n2 Febrero    41500  35400      6300       -200 negativo\n3   Marzo    51200  35600      7100       8500 positivo\n4   Abril    49700  36300      6850       6550 positivo\n\n\n\n\n\n\n\n\n\n\nFiltrar el conjunto de datos para quedarse con los nombres de los meses y los beneficios de los meses con balance positivo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[df$Balance == \"positivo\", c(\"Mes\", \"Beneficios\")]\n\n    Mes Beneficios\n1 Enero       5150\n3 Marzo       8500\n4 Abril       6550\n\n\n\n\nCon las funciones filter y select del paquete dplyr de tidyverse. La función filter permite seleccionar las filas de un data frame que cumplen una condición. La función select permite seleccionar las columnas de un data frame.\n\ndf |&gt;\n    filter(Balance == \"positivo\") |&gt; \n    select(Mes, Beneficios)\n\n    Mes Beneficios\n1 Enero       5150\n2 Marzo       8500\n3 Abril       6550\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 3.2 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf &lt;- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\nhead(df)\n\n                        nombre edad sexo peso altura colesterol\n1 José Luis Martínez Izquierdo   18    H   85   1.79        182\n2               Rosa Díaz Díaz   32    M   65   1.73        232\n3        Javier García Sánchez   24    H   NA   1.81        191\n4          Carmen López Pinzón   35    M   65   1.70        200\n5         Marisa López Collado   46    M   51   1.58        148\n6            Antonio Ruiz Cruz   68    H   66   1.74        249\n\n\n\n\nCon la función read_csv del paquete del paquete readr de tidyverse.\n\ndf &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\nhead(df)\n\n# A tibble: 6 × 6\n  nombre                        edad sexo   peso altura colesterol\n  &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 José Luis Martínez Izquierdo    18 H        85   1.79        182\n2 Rosa Díaz Díaz                  32 M        65   1.73        232\n3 Javier García Sánchez           24 H        NA   1.81        191\n4 Carmen López Pinzón             35 M        65   1.7         200\n5 Marisa López Collado            46 M        51   1.58        148\n6 Antonio Ruiz Cruz               68 H        66   1.74        249\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con el índice de masa corporal, usando la siguiente fórmula\n\\[\n\\mbox{IMC} = \\frac{\\mbox{Peso (kg)}}{\\mbox{Altura (cm)}^2}\n\\]\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$imc &lt;- round(df$peso/df$altura^2)\nhead(df)\n\n# A tibble: 6 × 7\n  nombre                        edad sexo   peso altura colesterol   imc\n  &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 José Luis Martínez Izquierdo    18 H        85   1.79        182    27\n2 Rosa Díaz Díaz                  32 M        65   1.73        232    22\n3 Javier García Sánchez           24 H        NA   1.81        191    NA\n4 Carmen López Pinzón             35 M        65   1.7         200    22\n5 Marisa López Collado            46 M        51   1.58        148    20\n6 Antonio Ruiz Cruz               68 H        66   1.74        249    22\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt; mutate(imc = round(peso/altura^2))\nhead(df)\n\n# A tibble: 6 × 7\n  nombre                        edad sexo   peso altura colesterol   imc\n  &lt;chr&gt;                        &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt;\n1 José Luis Martínez Izquierdo    18 H        85   1.79        182    27\n2 Rosa Díaz Díaz                  32 M        65   1.73        232    22\n3 Javier García Sánchez           24 H        NA   1.81        191    NA\n4 Carmen López Pinzón             35 M        65   1.7         200    22\n5 Marisa López Collado            46 M        51   1.58        148    20\n6 Antonio Ruiz Cruz               68 H        66   1.74        249    22\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con la variable obesidad recodificando la columna imc en las siguientes categorías.\n\n\nRango IMC\nCategoría\n\n\n\nMenor de 18.5\nBajo peso\n\n\nDe 18.5 a 24.5\nSaludable\n\n\nDe 24.5 a 30\nSobrepeso\n\n\nMayor de 30\nObeso\n\n\n\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función cut del paquete base de R.\n\ndf$Obesidad &lt;- cut(df$imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c(\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\"))\nhead(df)\n\n# A tibble: 6 × 8\n  nombre                       edad sexo   peso altura colesterol   imc Obesidad\n  &lt;chr&gt;                       &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n1 José Luis Martínez Izquier…    18 H        85   1.79        182    27 Sobrepe…\n2 Rosa Díaz Díaz                 32 M        65   1.73        232    22 Saludab…\n3 Javier García Sánchez          24 H        NA   1.81        191    NA &lt;NA&gt;    \n4 Carmen López Pinzón            35 M        65   1.7         200    22 Saludab…\n5 Marisa López Collado           46 M        51   1.58        148    20 Saludab…\n6 Antonio Ruiz Cruz              68 H        66   1.74        249    22 Saludab…\n\n\n\n\nCon las funciones del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt;\n    mutate(Obesidad = cut(imc, breaks = c(0, 18.5, 24.5, 30, Inf), labels = c(\"Bajo peso\", \"Saludable\", \"Sobrepeso\", \"Obeso\")))\nhead(df)\n\n# A tibble: 6 × 8\n  nombre                       edad sexo   peso altura colesterol   imc Obesidad\n  &lt;chr&gt;                       &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n1 José Luis Martínez Izquier…    18 H        85   1.79        182    27 Sobrepe…\n2 Rosa Díaz Díaz                 32 M        65   1.73        232    22 Saludab…\n3 Javier García Sánchez          24 H        NA   1.81        191    NA &lt;NA&gt;    \n4 Carmen López Pinzón            35 M        65   1.7         200    22 Saludab…\n5 Marisa López Collado           46 M        51   1.58        148    20 Saludab…\n6 Antonio Ruiz Cruz              68 H        66   1.74        249    22 Saludab…\n\n\n\n\n\n\n\n\n\n\nSeleccionar las columnas nombre, sexo y edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[, c(\"nombre\", \"sexo\", \"edad\")]\n\n# A tibble: 14 × 3\n   nombre                          sexo   edad\n   &lt;chr&gt;                           &lt;chr&gt; &lt;dbl&gt;\n 1 José Luis Martínez Izquierdo    H        18\n 2 Rosa Díaz Díaz                  M        32\n 3 Javier García Sánchez           H        24\n 4 Carmen López Pinzón             M        35\n 5 Marisa López Collado            M        46\n 6 Antonio Ruiz Cruz               H        68\n 7 Antonio Fernández Ocaña         H        51\n 8 Pilar Martín González           M        22\n 9 Pedro Gálvez Tenorio            H        35\n10 Santiago Reillo Manzano         H        46\n11 Macarena Álvarez Luna           M        53\n12 José María de la Guía Sanz      H        58\n13 Miguel Angel Cuadrado Gutiérrez H        27\n14 Carolina Rubio Moreno           M        20\n\n\n\n\nCon la función select del paquete dplyr de tidyverse.\n\ndf |&gt; select(nombre, sexo, edad)\n\n# A tibble: 14 × 3\n   nombre                          sexo   edad\n   &lt;chr&gt;                           &lt;chr&gt; &lt;dbl&gt;\n 1 José Luis Martínez Izquierdo    H        18\n 2 Rosa Díaz Díaz                  M        32\n 3 Javier García Sánchez           H        24\n 4 Carmen López Pinzón             M        35\n 5 Marisa López Collado            M        46\n 6 Antonio Ruiz Cruz               H        68\n 7 Antonio Fernández Ocaña         H        51\n 8 Pilar Martín González           M        22\n 9 Pedro Gálvez Tenorio            H        35\n10 Santiago Reillo Manzano         H        46\n11 Macarena Álvarez Luna           M        53\n12 José María de la Guía Sanz      H        58\n13 Miguel Angel Cuadrado Gutiérrez H        27\n14 Carolina Rubio Moreno           M        20\n\n\n\n\n\n\n\n\n\n\nAnonimizar los datos eliminando la columna nombre.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[, -1]\n\n# A tibble: 14 × 7\n    edad sexo   peso altura colesterol   imc Obesidad \n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n 1    18 H        85   1.79        182    27 Sobrepeso\n 2    32 M        65   1.73        232    22 Saludable\n 3    24 H        NA   1.81        191    NA &lt;NA&gt;     \n 4    35 M        65   1.7         200    22 Saludable\n 5    46 M        51   1.58        148    20 Saludable\n 6    68 H        66   1.74        249    22 Saludable\n 7    51 H        62   1.72        276    21 Saludable\n 8    22 M        60   1.66         NA    22 Saludable\n 9    35 H        90   1.94        241    24 Saludable\n10    46 H        75   1.85        280    22 Saludable\n11    53 M        55   1.62        262    21 Saludable\n12    58 H        78   1.87        198    22 Saludable\n13    27 H       109   1.98        210    28 Sobrepeso\n14    20 M        61   1.77        194    19 Saludable\n\n\n\n\nCon la función select del paquete dplyr de tidyverse.\n\ndf |&gt; select(-nombre)\n\n# A tibble: 14 × 7\n    edad sexo   peso altura colesterol   imc Obesidad \n   &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n 1    18 H        85   1.79        182    27 Sobrepeso\n 2    32 M        65   1.73        232    22 Saludable\n 3    24 H        NA   1.81        191    NA &lt;NA&gt;     \n 4    35 M        65   1.7         200    22 Saludable\n 5    46 M        51   1.58        148    20 Saludable\n 6    68 H        66   1.74        249    22 Saludable\n 7    51 H        62   1.72        276    21 Saludable\n 8    22 M        60   1.66         NA    22 Saludable\n 9    35 H        90   1.94        241    24 Saludable\n10    46 H        75   1.85        280    22 Saludable\n11    53 M        55   1.62        262    21 Saludable\n12    58 H        78   1.87        198    22 Saludable\n13    27 H       109   1.98        210    28 Sobrepeso\n14    20 M        61   1.77        194    19 Saludable\n\n\n\n\n\n\n\n\n\n\nReordenar las columnas poniendo la columna sexo antes que la columna edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[, c(1, 3, 2, 4, 5, 6)]\n\n# A tibble: 14 × 6\n   nombre                          sexo   edad  peso altura colesterol\n   &lt;chr&gt;                           &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n 1 José Luis Martínez Izquierdo    H        18    85   1.79        182\n 2 Rosa Díaz Díaz                  M        32    65   1.73        232\n 3 Javier García Sánchez           H        24    NA   1.81        191\n 4 Carmen López Pinzón             M        35    65   1.7         200\n 5 Marisa López Collado            M        46    51   1.58        148\n 6 Antonio Ruiz Cruz               H        68    66   1.74        249\n 7 Antonio Fernández Ocaña         H        51    62   1.72        276\n 8 Pilar Martín González           M        22    60   1.66         NA\n 9 Pedro Gálvez Tenorio            H        35    90   1.94        241\n10 Santiago Reillo Manzano         H        46    75   1.85        280\n11 Macarena Álvarez Luna           M        53    55   1.62        262\n12 José María de la Guía Sanz      H        58    78   1.87        198\n13 Miguel Angel Cuadrado Gutiérrez H        27   109   1.98        210\n14 Carolina Rubio Moreno           M        20    61   1.77        194\n\n\n\n\nCon la función select del paquete dplyr de tidyverse.\n\ndf |&gt; select(nombre, sexo, edad, everything())\n\n# A tibble: 14 × 8\n   nombre                     sexo   edad  peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie… H        18    85   1.79        182    27 Sobrepe…\n 2 Rosa Díaz Díaz             M        32    65   1.73        232    22 Saludab…\n 3 Javier García Sánchez      H        24    NA   1.81        191    NA &lt;NA&gt;    \n 4 Carmen López Pinzón        M        35    65   1.7         200    22 Saludab…\n 5 Marisa López Collado       M        46    51   1.58        148    20 Saludab…\n 6 Antonio Ruiz Cruz          H        68    66   1.74        249    22 Saludab…\n 7 Antonio Fernández Ocaña    H        51    62   1.72        276    21 Saludab…\n 8 Pilar Martín González      M        22    60   1.66         NA    22 Saludab…\n 9 Pedro Gálvez Tenorio       H        35    90   1.94        241    24 Saludab…\n10 Santiago Reillo Manzano    H        46    75   1.85        280    22 Saludab…\n11 Macarena Álvarez Luna      M        53    55   1.62        262    21 Saludab…\n12 José María de la Guía Sanz H        58    78   1.87        198    22 Saludab…\n13 Miguel Angel Cuadrado Gut… H        27   109   1.98        210    28 Sobrepe…\n14 Carolina Rubio Moreno      M        20    61   1.77        194    19 Saludab…\n\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con las mujeres.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[df$sexo == \"M\", ]\n\n# A tibble: 6 × 8\n  nombre                 edad sexo   peso altura colesterol   imc Obesidad \n  &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n1 Rosa Díaz Díaz           32 M        65   1.73        232    22 Saludable\n2 Carmen López Pinzón      35 M        65   1.7         200    22 Saludable\n3 Marisa López Collado     46 M        51   1.58        148    20 Saludable\n4 Pilar Martín González    22 M        60   1.66         NA    22 Saludable\n5 Macarena Álvarez Luna    53 M        55   1.62        262    21 Saludable\n6 Carolina Rubio Moreno    20 M        61   1.77        194    19 Saludable\n\n\n\n\nCon la función filter del paquete dplyr de tidyverse.\n\ndf |&gt; filter(sexo == \"M\")\n\n# A tibble: 6 × 8\n  nombre                 edad sexo   peso altura colesterol   imc Obesidad \n  &lt;chr&gt;                 &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n1 Rosa Díaz Díaz           32 M        65   1.73        232    22 Saludable\n2 Carmen López Pinzón      35 M        65   1.7         200    22 Saludable\n3 Marisa López Collado     46 M        51   1.58        148    20 Saludable\n4 Pilar Martín González    22 M        60   1.66         NA    22 Saludable\n5 Macarena Álvarez Luna    53 M        55   1.62        262    21 Saludable\n6 Carolina Rubio Moreno    20 M        61   1.77        194    19 Saludable\n\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con los hombres mayores de 30 años.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[df$sexo == \"H\" & df$edad &gt; 30, ]    \n\n# A tibble: 5 × 8\n  nombre                      edad sexo   peso altura colesterol   imc Obesidad \n  &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n1 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludable\n2 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludable\n3 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludable\n4 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludable\n5 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludable\n\n\n\n\nCon la función filter paquete dplyr de tidyverse.\n\ndf |&gt; filter( sexo == \"H\" & edad &gt; 30)\n\n# A tibble: 5 × 8\n  nombre                      edad sexo   peso altura colesterol   imc Obesidad \n  &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;    \n1 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludable\n2 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludable\n3 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludable\n4 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludable\n5 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludable\n\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para quedarse con las filas sin valores perdidos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función na.omit del paquete base de R. La función na.omit elimina las filas con valores perdidos.\n\nna.omit(df)\n\n# A tibble: 12 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n 3 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n 4 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n 5 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n 6 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n 7 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n 8 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n 9 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n10 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n11 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n12 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n\n\n\n\nCon la función drop_na del paquete tidyr de tidyverse.\n\ndf |&gt; drop_na()\n\n# A tibble: 12 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n 3 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n 4 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n 5 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n 6 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n 7 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n 8 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n 9 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n10 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n11 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n12 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n\n\n\n\n\n\n\n\n\n\nFiltrar el data frame para eliminar las filas con datos perdidos en la columna colesterol.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R. La función is.na devuelve TRUE cuando se aplica a un valor perdido NA. Cuando se aplica a un vector devuelve un vector lógico con TRUE en las posiciones con valores perdidos y FALSE en las posiciones con valores no perdidos.\n\ndf[!is.na(df$colesterol), ]\n\n# A tibble: 13 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n 3 Javier García Sánchez         24 H        NA   1.81        191    NA &lt;NA&gt;    \n 4 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n 5 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n 6 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n 7 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n 8 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n 9 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n10 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n11 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n12 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n13 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n\n\n\n\nCon la función filter del paquete dplyr de tidyverse.\n\ndf |&gt; filter(!is.na(colesterol))\n\n# A tibble: 13 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79        182    27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73        232    22 Saludab…\n 3 Javier García Sánchez         24 H        NA   1.81        191    NA &lt;NA&gt;    \n 4 Carmen López Pinzón           35 M        65   1.7         200    22 Saludab…\n 5 Marisa López Collado          46 M        51   1.58        148    20 Saludab…\n 6 Antonio Ruiz Cruz             68 H        66   1.74        249    22 Saludab…\n 7 Antonio Fernández Ocaña       51 H        62   1.72        276    21 Saludab…\n 8 Pedro Gálvez Tenorio          35 H        90   1.94        241    24 Saludab…\n 9 Santiago Reillo Manzano       46 H        75   1.85        280    22 Saludab…\n10 Macarena Álvarez Luna         53 M        55   1.62        262    21 Saludab…\n11 José María de la Guía Sanz    58 H        78   1.87        198    22 Saludab…\n12 Miguel Angel Cuadrado Gut…    27 H       109   1.98        210    28 Sobrepe…\n13 Carolina Rubio Moreno         20 M        61   1.77        194    19 Saludab…\n\n\n\n\n\n\n\n\n\n\nImputar los valores perdidos en la columna colesterol con la media de los valores no perdidos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función mean del paquete base de R. La función mean calcula la media de un vector. Para que no se tengan en cuenta los valores perdidos se puede usar el argumento na.rm = TRUE.\n\nmedia_colesterol &lt;- mean(df$colesterol, na.rm = TRUE)\ndf$colesterol[is.na(df$colesterol)] &lt;- media_colesterol\ndf\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n 3 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 4 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n 5 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n 6 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 7 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 8 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n 9 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n10 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n11 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n12 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n13 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse. La función ifelse permite asignar un valor a un vector en función de una condición.\n\ndf &lt;- df |&gt;\n    mutate(colesterol = ifelse(is.na(colesterol), mean(colesterol, na.rm = TRUE), colesterol))\ndf\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 2 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n 3 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 4 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n 5 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n 6 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 7 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 8 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n 9 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n10 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n11 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n12 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n13 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n\n\n\n\n\n\n\n\n\n\nOrdenar el data frame según la columna nombre.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función order del paquete base de R. La función order devuelve un vector con los índices de las filas ordenadas de menor a mayor.\n\ndf[order(df$nombre), ]\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 2 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 3 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n 4 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n 5 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 6 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 7 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n 8 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n 9 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n10 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n11 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n12 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n13 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n14 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n\n\n\n\nCon la función arrange del paquete dplyr de tidyverse.\n\ndf |&gt; arrange(nombre)\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 2 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 3 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n 4 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n 5 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 6 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 7 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n 8 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n 9 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n10 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n11 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n12 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n13 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n14 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n\n\n\n\n\n\n\n\n\n\nOrdenar el data frame ascendentemente por la columna sexo y descendentemente por la columna edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf[order(df$sexo, -df$edad), ]\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 2 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n 3 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 4 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n 5 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n 6 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n 7 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 8 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 9 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n10 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n11 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n12 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n13 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n\n\n\n\nCon la función arrange del paquete dplyr de tidyverse. Para que la ordenación sea descendente con respecto a una variable se tiene que usar la función desc sobre la variable.\n\ndf |&gt;\n    arrange(sexo, desc(edad))\n\n# A tibble: 14 × 8\n   nombre                      edad sexo   peso altura colesterol   imc Obesidad\n   &lt;chr&gt;                      &lt;dbl&gt; &lt;chr&gt; &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;   \n 1 Antonio Ruiz Cruz             68 H        66   1.74       249     22 Saludab…\n 2 José María de la Guía Sanz    58 H        78   1.87       198     22 Saludab…\n 3 Antonio Fernández Ocaña       51 H        62   1.72       276     21 Saludab…\n 4 Santiago Reillo Manzano       46 H        75   1.85       280     22 Saludab…\n 5 Pedro Gálvez Tenorio          35 H        90   1.94       241     24 Saludab…\n 6 Miguel Angel Cuadrado Gut…    27 H       109   1.98       210     28 Sobrepe…\n 7 Javier García Sánchez         24 H        NA   1.81       191     NA &lt;NA&gt;    \n 8 José Luis Martínez Izquie…    18 H        85   1.79       182     27 Sobrepe…\n 9 Macarena Álvarez Luna         53 M        55   1.62       262     21 Saludab…\n10 Marisa López Collado          46 M        51   1.58       148     20 Saludab…\n11 Carmen López Pinzón           35 M        65   1.7        200     22 Saludab…\n12 Rosa Díaz Díaz                32 M        65   1.73       232     22 Saludab…\n13 Pilar Martín González         22 M        60   1.66       220.    22 Saludab…\n14 Carolina Rubio Moreno         20 M        61   1.77       194     19 Saludab…\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 3.3 El fichero notas-curso2.csv contiene las notas de las asignaturas de un curso en varios grupos de alumnos.\n\n\nCrear un data frame con los datos del curso a partir del fichero notas-curso2.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/notas-curso2.csv\")\ndf\n\n# A tibble: 120 × 9\n   sexo   turno  grupo trabaja notaA notaB notaC notaD notaE\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;\n 1 Mujer  Tarde  C     N         5.2   6.3   3.4   2.3   2  \n 2 Hombre Mañana A     N         5.7   5.7   4.2   3.5   2.7\n 3 Hombre Mañana B     N         8.3   8.8   8.8   8     5.5\n 4 Hombre Mañana B     N         6.1   6.8   4     3.5   2.2\n 5 Hombre Mañana A     N         6.2   9     5     4.4   3.7\n 6 Hombre Mañana A     S         8.6   8.9   9.5   8.4   3.9\n 7 Mujer  Mañana A     N         6.7   7.9   5.6   4.8   4.2\n 8 Mujer  Tarde  C     S         4.1   5.2   1.7   0.3   1  \n 9 Hombre Tarde  C     N         5     5     3.3   2.7   6  \n10 Hombre Tarde  C     N         5.3   6.3   4.8   3.6   2.3\n# ℹ 110 more rows\n\n\n\n\n\n\n\nConvertir el data frame a formato largo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara convertir un data frame de formato ancho a largo se puede usar la función pivot_longer del paquete tidyr de tidyverse.\n\ndf_largo &lt;- df |&gt; pivot_longer(notaA:notaE, names_to = \"Asignatura\", values_to = \"Nota\")\ndf_largo\n\n# A tibble: 600 × 6\n   sexo   turno  grupo trabaja Asignatura  Nota\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt;\n 1 Mujer  Tarde  C     N       notaA        5.2\n 2 Mujer  Tarde  C     N       notaB        6.3\n 3 Mujer  Tarde  C     N       notaC        3.4\n 4 Mujer  Tarde  C     N       notaD        2.3\n 5 Mujer  Tarde  C     N       notaE        2  \n 6 Hombre Mañana A     N       notaA        5.7\n 7 Hombre Mañana A     N       notaB        5.7\n 8 Hombre Mañana A     N       notaC        4.2\n 9 Hombre Mañana A     N       notaD        3.5\n10 Hombre Mañana A     N       notaE        2.7\n# ℹ 590 more rows\n\n\n\n\n\n\n\nCrear una nueva columna con la variable calificación que contenga las calificaciones de cada asignatura.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf_largo &lt;- df_largo |&gt;\n    mutate(Califiación = cut(Nota, breaks = c(0, 4.99, 6.99, 8.99, 10), labels = c(\"SS\", \"AP\", \"NT\", \"SB\")))\ndf_largo\n\n# A tibble: 600 × 7\n   sexo   turno  grupo trabaja Asignatura  Nota Califiación\n   &lt;chr&gt;  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;   &lt;chr&gt;      &lt;dbl&gt; &lt;fct&gt;      \n 1 Mujer  Tarde  C     N       notaA        5.2 AP         \n 2 Mujer  Tarde  C     N       notaB        6.3 AP         \n 3 Mujer  Tarde  C     N       notaC        3.4 SS         \n 4 Mujer  Tarde  C     N       notaD        2.3 SS         \n 5 Mujer  Tarde  C     N       notaE        2   SS         \n 6 Hombre Mañana A     N       notaA        5.7 AP         \n 7 Hombre Mañana A     N       notaB        5.7 AP         \n 8 Hombre Mañana A     N       notaC        4.2 SS         \n 9 Hombre Mañana A     N       notaD        3.5 SS         \n10 Hombre Mañana A     N       notaE        2.7 SS         \n# ℹ 590 more rows\n\n\n\n\n\n\n\nFiltrar el conjunto de datos para obtener las asignaturas y las notas de las mujeres del grupo A, ordenadas de mayor a menor.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndf_largo |&gt;\n    filter(sexo == \"Mujer\", grupo == \"A\") |&gt;\n    select(Asignatura, Nota) |&gt;\n    arrange(desc(Nota))\n\n# A tibble: 75 × 2\n   Asignatura  Nota\n   &lt;chr&gt;      &lt;dbl&gt;\n 1 notaB        9.2\n 2 notaE        9.2\n 3 notaB        8.8\n 4 notaB        8.6\n 5 notaB        8.6\n 6 notaA        8.3\n 7 notaB        8.2\n 8 notaB        8.1\n 9 notaA        8  \n10 notaB        8  \n# ℹ 65 more rows\n\n\n\n\n\n\n\n\n\nEjercicio 3.4 Se ha diseñado un ensayo clínico aleatorizado, doble-ciego y controlado con placebo, para estudiar el efecto de dos alternativas terapéuticas en el control de la hipertensión arterial. Se han reclutado 100 pacientes hipertensos y estos han sido distribuidos aleatoriamente en tres grupos de tratamiento. A uno de los grupos (control) se le administró un placebo, a otro grupo se le administró un inhibidor de la enzima conversora de la angiotensina (IECA) y al otro un tratamiento combinado de un diurético y un Antagonista del Calcio. Las variables respuesta final fueron las presiones arteriales sistólica y diastólica.\nLos datos con las claves de aleatorización han sido introducidos en una base de datos que reside en la central de aleatorización, mientras que los datos clínicos han sido archivados en dos archivos distintos, uno para cada uno de los dos centros participantes en el estudio.\nLas variables almacenadas en estos archivos clínicos son las siguientes:\n\nCLAVE: Clave de aleatorización\nNOMBRE: Iniciales del paciente\nF_NACIM: Fecha de Nacimiento\nF_INCLUS: Fecha de inclusión\nSEXO: Sexo (0: Hombre 1: Mujer)\nALTURA: Altura en cm.\nPESO: Peso en Kg.\nPAD_INI: Presión diastólica basal (inicial)\nPAD_FIN: Presión diastólica final\nPAS_INI: Presión sistólica basal (inicial)\nPAS_FIN: Presión sistólica final\n\nEl archivo de claves de aleatorización contiene sólo dos variables.\n\nCLAVE: Clave de aleatorización\nFARMACO: Fármaco administrado (0: Placebo, 1: IECA, 2:Ca Antagonista + diurético)\n\n\n\nCrear un data frame con los datos de los pacientes del hospital A del fichero de Excel datos-hospital-a.xls.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nlibrary(readxl)\ndfA &lt;- read_excel(\"datos/hipertension/datos-hospital-a.xls\")\nhead(dfA)\n\n# A tibble: 6 × 12\n  CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n# ℹ 4 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;\n\n\n\n\n\n\n\nCrear un data frame con los datos de los pacientes del hospital B del fichero csv datos-hospital-b.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\ndfB &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/hipertension/datos-hospital-b.csv\")\nhead(dfB)\n\n# A tibble: 6 × 12\n  CLAVE NOMBRE F_NACIM    F_INCLUS    SEXO ALTURA  PESO ESTRES PAD_INI PAD_FIN\n  &lt;dbl&gt; &lt;chr&gt;  &lt;date&gt;     &lt;date&gt;     &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;\n1    11 VSH    1965-12-15 1999-12-06     0    170    59   32        90      82\n2    12 SZS    1971-03-07 1999-02-13     1    154    61   20.2      92     102\n3    13 JSS    1964-01-03 1998-10-31     1    162    49   30        86      94\n4    14 BMH    1941-08-16 1999-09-16     0    162    77   26        93      77\n5    15 DGM    1969-01-24 1999-08-19     1    173    95   18        81      77\n6    16 POJ    1966-10-22 2000-10-29     1    177    63   19        72      96\n# ℹ 2 more variables: PAS_INI &lt;dbl&gt;, PAS_FIN &lt;dbl&gt;\n\n\n\n\n\n\n\nFusionar los datos de los dos hospitales en un nuevo data frame.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función rbind del paquete base de R.\n\ndf &lt;- rbind(dfA, dfB)\nhead(df)\n\n# A tibble: 6 × 12\n  CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n# ℹ 4 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;\n\n\n\n\nCon la función bind_rows del paquete dplyr de tidyverse.\n\ndf &lt;- dfA |&gt; bind_rows(dfB)\nhead(df)\n\n# A tibble: 6 × 12\n  CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n# ℹ 4 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;\n\n\n\n\n\n\n\n\n\n\nCrear un data frame con los datos de las claves de aleatorización del fichero csv claves-aleatorizacion.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\nclaves &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/hipertension/claves-aleatorizacion.csv\")\nhead(claves)\n\n# A tibble: 6 × 2\n  CLAVE FARMACO                   \n  &lt;dbl&gt; &lt;chr&gt;                     \n1     1 Ca Antagonista + Diurético\n2     2 Ca Antagonista + Diurético\n3     3 Placebo                   \n4     4 Ca Antagonista + Diurético\n5     5 Ca Antagonista + Diurético\n6     6 Placebo                   \n\n\n\n\n\n\n\nFusionar el data frame con los datos clínicos y el data frame con claves de aleatorización en un nuevo data frame.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara fusionar las columnas de dos data frames usando una misma columna como clave en ambos data frames se puede la función left_join del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt; left_join(claves, by = \"CLAVE\")\nhead(df)\n\n# A tibble: 6 × 13\n  CLAVE NOMBRE F_NACIM             F_INCLUS             SEXO ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00     1    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00     1    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00     0    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00     0    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00     1    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00     0    179    80     22\n# ℹ 5 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;, FARMACO &lt;chr&gt;\n\n\n\n\n\n\n\nConvertir la columna del sexo en un factor con dos niveles: Hombre y Mujer.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función del paquete base de R.\n\ndf$SEXO &lt;- factor(df$SEXO, levels = c(0, 1), labels = c(\"Hombre\", \"Mujer\"))\nhead(df)\n\n# A tibble: 6 × 13\n  CLAVE NOMBRE F_NACIM             F_INCLUS            SEXO  ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;fct&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00 Mujer    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00 Mujer    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00 Homb…    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00 Homb…    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00 Mujer    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00 Homb…    179    80     22\n# ℹ 5 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;, FARMACO &lt;chr&gt;\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse.\ndf &lt;- df |&gt; mutate(SEXO = factor(SEXO, levels = c(0, 1), labels = c(\"Hombre\", \"Mujer\")))\nhead(df)\n\n\n# A tibble: 6 × 13\n  CLAVE NOMBRE F_NACIM             F_INCLUS            SEXO  ALTURA  PESO ESTRES\n  &lt;dbl&gt; &lt;chr&gt;  &lt;dttm&gt;              &lt;dttm&gt;              &lt;fct&gt;  &lt;dbl&gt; &lt;dbl&gt;  &lt;dbl&gt;\n1     1 SGL    1941-09-08 00:00:00 1998-07-13 00:00:00 Mujer    165    78     42\n2     2 JCZ    1957-07-10 00:00:00 1998-05-09 00:00:00 Mujer    154    74     30\n3     3 APZ    1967-08-18 00:00:00 2000-04-01 00:00:00 Homb…    156    81     21\n4     4 NDG    1956-05-08 00:00:00 1998-11-13 00:00:00 Homb…    181    82     33\n5     5 CLO    1958-11-02 00:00:00 1999-02-24 00:00:00 Mujer    184    78     36\n6     6 LFZ    1953-06-13 00:00:00 2000-03-16 00:00:00 Homb…    179    80     22\n# ℹ 5 more variables: PAD_INI &lt;dbl&gt;, PAD_FIN &lt;dbl&gt;, PAS_INI &lt;dbl&gt;,\n#   PAS_FIN &lt;dbl&gt;, FARMACO &lt;chr&gt;\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con la edad de los pacientes en el momento de inclusión en el estudio.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función del paquete base de R.\n\ndf$EDAD &lt;- as.numeric(difftime(df$F_INCLUS, df$F_NACIM, units = \"days\")/365)\nhead(df[, c(\"F_NACIM\", \"F_INCLUS\", \"EDAD\")])\n\n# A tibble: 6 × 3\n  F_NACIM             F_INCLUS             EDAD\n  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;\n1 1941-09-08 00:00:00 1998-07-13 00:00:00  56.9\n2 1957-07-10 00:00:00 1998-05-09 00:00:00  40.9\n3 1967-08-18 00:00:00 2000-04-01 00:00:00  32.6\n4 1956-05-08 00:00:00 1998-11-13 00:00:00  42.5\n5 1958-11-02 00:00:00 1999-02-24 00:00:00  40.3\n6 1953-06-13 00:00:00 2000-03-16 00:00:00  46.8\n\n\n\n\nCon las funciones interval y time_length del paquete lubridate de tidyverse. La función interval permite crear un intervalo de tiempo entre dos fechas y la función time_length permite calcular la longitud de un intervalo en una determinada unidad de tiempo.\n\ndf &lt;- df |&gt; mutate(AGE = time_length(interval(F_NACIM, F_INCLUS), \"years\"))\nhead(df |&gt;  select(F_NACIM, F_INCLUS, AGE))\n\n# A tibble: 6 × 3\n  F_NACIM             F_INCLUS              AGE\n  &lt;dttm&gt;              &lt;dttm&gt;              &lt;dbl&gt;\n1 1941-09-08 00:00:00 1998-07-13 00:00:00  56.8\n2 1957-07-10 00:00:00 1998-05-09 00:00:00  40.8\n3 1967-08-18 00:00:00 2000-04-01 00:00:00  32.6\n4 1956-05-08 00:00:00 1998-11-13 00:00:00  42.5\n5 1958-11-02 00:00:00 1999-02-24 00:00:00  40.3\n6 1953-06-13 00:00:00 2000-03-16 00:00:00  46.8\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna con el índice de masa corporal (IMC) de los pacientes.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$IMC &lt;- df$PESO/(df$ALTURA/100)^2\nhead(df[, c(\"PESO\", \"ALTURA\", \"IMC\")])\n\n# A tibble: 6 × 3\n   PESO ALTURA   IMC\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1    78    165  28.7\n2    74    154  31.2\n3    81    156  33.3\n4    82    181  25.0\n5    78    184  23.0\n6    80    179  25.0\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt; mutate(IMC = PESO/(ALTURA/100)^2)\nhead(df |&gt; select(PESO, ALTURA, IMC))\n\n# A tibble: 6 × 3\n   PESO ALTURA   IMC\n  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1    78    165  28.7\n2    74    154  31.2\n3    81    156  33.3\n4    82    181  25.0\n5    78    184  23.0\n6    80    179  25.0\n\n\n\n\n\n\n\n\n\n\nCrear una nueva columna para la evolución de la presión arterial diastólica y otra con la evolución de la presión arterial sistólica.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\ndf$EVOL_PAD &lt;- df$PAD_FIN - df$PAD_INI\ndf$EVOL_PAS &lt;- df$PAS_FIN - df$PAS_INI\nhead(df[, c(\"PAD_INI\", \"PAD_FIN\", \"EVOL_PAD\", \"PAS_INI\", \"PAS_FIN\", \"EVOL_PAS\")])\n\n# A tibble: 6 × 6\n  PAD_INI PAD_FIN EVOL_PAD PAS_INI PAS_FIN EVOL_PAS\n    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1      78     104       26     176     175       -1\n2      95     114       19     162     160       -2\n3      93     102        9     141     150        9\n4      86      91        5     162     161       -1\n5      89      94        5     165     162       -3\n6      74      99       25     141     148        7\n\n\n\n\nCon la función mutate del paquete dplyr de tidyverse.\n\ndf &lt;- df |&gt; mutate(EVOL_PAD = PAD_FIN - PAD_INI, EVOL_PAS = PAS_FIN - PAS_INI)\nhead(df |&gt; select(PAD_INI, PAD_FIN, EVOL_PAD, PAS_INI, PAS_FIN, EVOL_PAS))\n\n# A tibble: 6 × 6\n  PAD_INI PAD_FIN EVOL_PAD PAS_INI PAS_FIN EVOL_PAS\n    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;\n1      78     104       26     176     175       -1\n2      95     114       19     162     160       -2\n3      93     102        9     141     150        9\n4      86      91        5     162     161       -1\n5      89      94        5     165     162       -3\n6      74      99       25     141     148        7\n\n\n\n\n\n\n\n\n\n\nGuardar el data frame en un fichero csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nCon la función write.csv del paquete base de R.\n\nwrite.csv(df, \"datos/hipertension/datos-ensayo-clinico.csv\")\n\n\n\nCon la función write_csv del paquete readr de tidyverse.\n\ndf  |&gt; write_csv(\"datos/hipertension/datos-ensayo-clinico.csv\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "03-preprocesamiento-datos.html#ejercicios-propuestos",
    "href": "03-preprocesamiento-datos.html#ejercicios-propuestos",
    "title": "\n3  Preprocesamiento de datos\n",
    "section": "\n3.2 Ejercicios Propuestos",
    "text": "3.2 Ejercicios Propuestos\n\nEjercicio 3.5 Los ficheros vinos-blancos.xls y vinos-tintos.csv contienen información sobre las características de vinos blancos y tintos portugueses de la denominación “Vinho Verde”. Las variables almacenadas en estos archivos son las siguientes:\n\n\n\n\n\n\n\nVariable\nDescripción\nTipo (unidades)\n\n\n\ntipo\nTipo de vino\nFactor (blanco, tinto)\n\n\nmeses.barrica\nMesesde envejecimiento en barrica\nNumérica(meses)\n\n\nacided.fija\nCantidadde ácidotartárico\nNumérica(g/dm3)\n\n\nacided.volatil\nCantidad de ácido acético\nNumérica(g/dm3)\n\n\nacido.citrico\nCantidad de ácidocítrico\nNumérica(g/dm3)\n\n\nazucar.residual\nCantidad de azúcarremanente después de la fermentación\nNumérica(g/dm3)\n\n\ncloruro.sodico\nCantidad de clorurosódico\nNumérica(g/dm3)\n\n\ndioxido.azufre.libre\nCantidad de dióxido de azufreen formalibre\nNumérica(mg/dm3)\n\n\ndioxido.azufre.total\nCantidadde dióxido de azufretotal en forma libre o ligada\nNumérica(mg/dm3)\n\n\ndensidad\nDensidad\nNumérica(g/cm3)\n\n\nph\npH\nNumérica(0-14)\n\n\nsulfatos\nCantidadde sulfato de potasio\nNumérica(g/dm3)\n\n\nalcohol\nPorcentajede contenidode alcohol\nNumérica(0-100)\n\n\ncalidad\nCalificación otorgada porun panel de expertos\nNumérica(0-10)\n\n\n\n\nCrear un data frame con los datos de los vinos blancos partir del fichero de Excel vinos-blancos.xlsx.\nCrear un data frame con los datos de los vinos tintos partir del fichero csv vinos-tintos.csv.\nFusionar los datos de los vinos blancos y tintos en un nuevo data frame.\nConvertir el tipo de vino en un factor.\nImputar los valores perdidos del alcohol con la media de los valores no perdidos para cada tipo de vino.\n\nCrear un factor Envejecimiento recodificando la variable meses.barrica en las siguientes categorías.\n\n\nRango en meses\nCategoría\n\n\n\nMenos de 3\nJoven\n\n\nEntre 3 y 12\nCrianza\n\n\nEntre 12 y 18\nReserva\n\n\nMás de 18\nGran reserva\n\n\n\n\n\nCrear un factor Dulzor recodificando la variable azucar.residual en las siguientes categorías.\n\n\nRango azúcar\nCategoría\n\n\n\nMenos de 4\nSeco\n\n\nMás de 4 y menos de 12\nSemiseco\n\n\nMás de 12 y menos de 45\nSemidulce\n\n\nMás de 45\nDulce\n\n\n\n\nFiltrar el conjunto de datos para quedarse con los vinos Reserva o Gran Reserva con una calidad superior a 7 y ordenar el data frame por calidad de forma descendente.\n¿Cuántos vinos blancos con un contenido en alcohol superior al 12% y una calidad superior a 8 hay en el conjunto de datos?",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Preprocesamiento de datos</span>"
    ]
  },
  {
    "objectID": "04-frecuencias-graficos.html",
    "href": "04-frecuencias-graficos.html",
    "title": "\n4  Distribuciones de frecuencias y representaciones gráficas\n",
    "section": "",
    "text": "4.1 Ejercicios Resueltos\nEn esta práctica contiene ejercicios que muestran como hacer un resumen descriptivos de un conjunto de datos mediante la construcción de tablas de frecuencias y la representación gráfica de las mismas. En particular, se muestra cómo construir los siguientes tipos de gráficos:\nPara la realización de esta práctica se requieren los siguientes paquetes:",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Distribuciones de frecuencias y representaciones gráficas</span>"
    ]
  },
  {
    "objectID": "04-frecuencias-graficos.html#ejercicios-resueltos",
    "href": "04-frecuencias-graficos.html#ejercicios-resueltos",
    "title": "\n4  Distribuciones de frecuencias y representaciones gráficas\n",
    "section": "",
    "text": "library(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\n# - ggplot2: para la representación gráfica.\nlibrary(knitr) # para el formateo de tablas.\n\nEjercicio 4.1 En una encuesta a 25 matrimonios sobre el número de hijos que tenían se obtuvieron los siguientes datos:\n\\[\n\\mbox{1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2}\n\\]\n\n\nCrear un conjunto de datos con la variable hijos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- data.frame(hijos = c(1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2))\n\n\n\n\nlibrary(tidyverse)\ndf &lt;- tibble(hijos = c(1, 2, 4, 2, 2, 2, 3, 2, 1, 1, 0, 2, 2, 0, 2, 2, 1, 2, 2, 3, 1, 2, 2, 1, 2))\n\n\n\n\n\n\n\n\n\nConstruir la tabla de frecuencias.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara obtener las frecuencias absolutas se puede usar la función table, y para las frecuencias relativas la función prop.table ambas del paquete base de R.\nPosteriormente, para obtener las frecuencias acumuladas se puede usar la función cumsum aplicada a las frecuencias absolutas y relativas.\n\nlibrary(knitr)\n# Frecuencias absolutas.\nni &lt;- table(df$hijos)\n# Frecuencias relativas\nfi &lt;- prop.table(ni)\n# Frecuencias acumuladas.\nNi &lt;- cumsum(ni)\n# Frecuencias relativas acumuladas.\nFi &lt;- cumsum(fi)\n# Creamos un data frame con las frecuencias.\ntabla_frec &lt;- cbind(ni, fi, Ni, Fi)\nkable(tabla_frec)\n\n\n\n\nni\nfi\nNi\nFi\n\n\n\n0\n2\n0.08\n2\n0.08\n\n\n1\n6\n0.24\n8\n0.32\n\n\n2\n14\n0.56\n22\n0.88\n\n\n3\n2\n0.08\n24\n0.96\n\n\n4\n1\n0.04\n25\n1.00\n\n\n\n\n\n\n\nPara obtener la tabla de frecuencias podemos usar la función count del paquete dplyr de tidyverse.\nPosteriormente podemos añadir nuevas columnas a la tabla de frecuencias mediante la función mutate y fórmulas para calcular las frecuencias relativas (n/sum(n)), frecuencias absolutas acumuladas (cumsum(n)) y frecuencias relativas acumuladas (cumsum(n)/sum(n)).\n\nlibrary(knitr)\n# Calculamos la tabla de frecuencias absolutas.\ndf |&gt; count(hijos) |&gt;\n    # Añadimos nuevas columnas con las frecuencias relativas, acumuladas y relativas acumuladas.\n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) |&gt;\n    kable()\n\n\n\nhijos\nn\nfi\nNi\nFi\n\n\n\n0\n2\n0.08\n2\n0.08\n\n\n1\n6\n0.24\n8\n0.32\n\n\n2\n14\n0.56\n22\n0.88\n\n\n3\n2\n0.08\n24\n0.96\n\n\n4\n1\n0.04\n25\n1.00\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar el diagrama de barras de las frecuencias absolutas, relativas, absolutas acumuladas y relativas acumuladas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar un diagrama de barras podemos usar la función barplot del paquete graphics.\nParámetros:\n\n\nheight: vector con las alturas de las barras.\n\ncol: color de las barras.\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\n\n# Diagrama de barras de frecuencias absolutas.\nbarplot(ni, col = \"steelblue\", main = \"Distribución del número de hijos\", xlab = \"Hijos\", ylab = \"Frecuencia absoluta\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias relativas.\nbarplot(fi, col = \"steelblue\", main = \"Distribución del número de hijos\", xlab = \"Hijos\", ylab = \"Frecuencia relativa\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias absolutas acumuladas.\nbarplot(Ni, col = \"steelblue\", main = \"Distribución acumulada del número de hijos\", xlab = \"Hijos\", ylab = \"Frecuencia absoluta acumulada\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias relativas acumuladas.\nbarplot(Fi, col = \"steelblue\", main = \"Distribución acumulada del número de hijos\", xlab = \"Hijos\", ylab = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\nPara dibujar un diagrama de barras podemos usar la función geom_bar del paquete ggplot2 de tidyverse. Esta función calcula automaticamente las frecuencias absolutas de la columna indicada en la dimensión x para barras horizontles o y para barras verticales.\nParámetros:\n\ncolor: color del borde de las barras.\nfill: color de relleno de las barras.\nwidth: anchura de las barras (valor entre 0 y 1).\n\nPara dibujar el diagrama de barras de frecuencias relativas o acumuladas, se le pude pasar como parámetro la función after_stat a la dimensión y:\n\n\nafter_stat(count/sum(count)): para las frecuencias relativas.\n\nafter_stat(cumsum(count)): para las frecuencias absolutas acumuladas.\n\nafter_stat(cumsum(count)/sum(count)): para las frecuencias relativas acumuladas.\n\n\n# Diagrama de barras de frecuencias absolutas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = hijos)) +\n    # Añadimos la geometría de barras.\n    geom_bar(fill = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes. \n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia absoluta\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias relativas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = hijos)) +\n    # Añadimos la geometría de barras y asignamos a la dimensión y las frecuencias relativas.\n    geom_bar(aes(y = after_stat(count/sum(count))), fill = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia relativa\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias acumuladas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = hijos)) +\n    # Añadimos la geometría de barras y asignamos a la dimensión y las frecuencias absolutas acumuladas.\n    geom_bar(aes(y = after_stat(cumsum(count))), fill = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución acumulada del número de hijos\", y = \"Frecuencia absoluta acumulada\")\n\n\n\n\n\n\n# Diagrama de barras de frecuencias acumuladas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = hijos)) +\n    # Añadimos la geometría de barras y asignamos a la dimensión y las frecuencias relativas acumuladas.\n    geom_bar(aes(y = after_stat(cumsum(count)/sum(count))), fill = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución acumulada del número de hijos\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar el polígono de frecuencias relativas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar el polígono de frecuencias podemos usar la función plot del paquete graphics.\nParámetros:\n\n\nx: tabla con las frecuencias.\n\ntype: tipo de gráfico. Para un polígono de frecuencias se usa \"l\" (línea).\n\ncol: color de la línea.\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\n\n# Frecuencias relativas.\nplot(fi, type = \"l\", col = \"steelblue\", main = \"Distribución del número de hijos\", xlab = \"Hijos\", ylab = \"Frecuencia relativa\")\n\n\n\n\n\n\n\n\n\nPar dibujar el polígono de frecuencias podemos usar la función geom_line del paquete ggplot2 de tidyverse, que conecta con segmentos los puntos con coordenadas pasadas en las dimensiones x e y.\nParámetros:\n\n\ncol: color de la línea.\n\nsize: grosor de la línea.\n\nlinetype: tipo de línea (por ejemplo, “solid”, “dashed”, “dotted”).\n\n\n# Calculamos las frecuencias absolutas.\ndf |&gt; count(hijos) |&gt; \n    # Añadimos una nueva columna con las frecuencias relativas.\n    mutate(fi = n/sum(n)) |&gt;\n    # Añadimos los hijos a la dimensión x y las frecuencias relativas a la dimensión y.\n    ggplot(aes(x = hijos, y = fi)) +\n    # Añadimos la geometría de líneas.\n    geom_line(col = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución del número de hijos\", y = \"Frecuencia relativa\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 4.2 En un hospital se realizó un estudio sobre el número de personas que ingresaron en urgencias cada día del mes de noviembre. Los datos observados fueron:\n\\[\n\\begin{array}{c}\n\\mbox{15, 23, 12, 10, 28, 50, 12, 17, 20, 21, 18, 13, 11, 12, 26} \\\\\n\\mbox{30, 6, 16, 19, 22, 14, 17, 21, 28, 9, 16, 13, 11, 16, 20}\n\\end{array}\n\\]\n\n\nCrear un conjunto de datos con la variable urgencias.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- data.frame(urgencias = c(15, 23, 12, 10, 28, 50, 12, 17, 20, 21, 18, 13, 11, 12, 26, 30, 6, 16, 19, 22, 14, 17, 21, 28, 9, 16, 13, 11, 16, 20))\n\n\n\n\nlibrary(tidyverse)\ndf &lt;- tibble(urgencias = c(15, 23, 12, 10, 28, 50, 12, 17, 20, 21, 18, 13, 11, 12, 26, 30, 6, 16, 19, 22, 14, 17, 21, 28, 9, 16, 13, 11, 16, 20))\n\n\n\n\n\n\n\n\n\nDibujar el diagrama de cajas. ¿Existe algún dato atípico? En el caso de que exista, eliminarlo y proceder con los siguientes apartados.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar un diagrama de caja y bigotes podemos usar la función boxplot del paquete graphics.\nParámetros:\n\n\nx: vector con las alturas de las barras.\n\ncol: color de la caja.\n\nhorizontal: orientación horizontal de la caja (True o False).\n\nwidth: anchura de la caja (valor entre 0 y 1).\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\n\nboxplot(df$urgencias, col = \"steelblue\",  horizontal = T, main = \"Distribución del número de urgencias\", xlab = \"Número de urgencias\")\n\n\n\n\n\n\n\n\n\nPara dibujar un diagrama de caja y bigotes podemos usar la función geom_boxplot del paquete ggplot2 de tidyverse.\nParámetros:\n\ncolor: color del borde de la caja.\nfill: color de relleno de la caja.\nwidth: anchura de la caja.\n\n\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = urgencias)) +\n    # Añadimos la geometría de cajas.\n    geom_boxplot(fill = \"steelblue\") +\n    # Eliminamos las marcas del eje y.\n    scale_y_continuous(breaks = NULL) +\n    # Añadimos el título y las etiquetas.\n    labs(title = \"Distribución del número de urgencias\", x = \"Número de urgencias\")\n\n\n\n\n\n\n\n\n\n\nHay un día con 50 urgencias, que es un valor atípico en comparación con el resto de días.\n\n\nBase\ntidyverse\n\n\n\nCon las funciones del paquete base de R.\n\n# Eliminamos el dato atípico.\ndf &lt;- df[df$urgencias != 50, , drop = F]\n\n\n\nCon la función filter del paquete dplyr de tidyverse.\n\n# Eliminamos el dato atípico.\ndf &lt;- filter(df, urgencias != 50)\n\n\n\n\n\n\n\n\n\nConstruir la tabla de frecuencias agrupando en 5 clases.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara agrupar los datos en intervalos se puede utilizar la función cut del paquete base de R.\nParámetros:\n\n\nbreaks: número de intervalos o un vector con los puntos de corte de los intervalos.\n\nPara contar las frecuencias absolutas y relativas podemos usar las funciones table, y prop.table respectivamente.\nPosteriormente, para obtener las frecuencias acumuladas se puede usar la función cumsum aplicada a las frecuencias absolutas y relativas.\n\nlibrary(knitr)\n# Calculamos las frecuencias absolutas agrupando en 5 clases desde 5 hasta 30.\nni &lt;- table(cut(df$urgencias, breaks = seq(5, 30, 5)))\n# Frecuencias relativas\nfi &lt;- prop.table(ni)\n# Frecuencias acumuladas.\nNi &lt;- cumsum(ni)\n# Frecuencias relativas acumuladas.\nFi &lt;- cumsum(fi)\n# Creación de un data frame con las frecuencias.\ntabla_frec &lt;- cbind(ni, fi, Ni, Fi)\nkable(tabla_frec)\n\n\n\n\nni\nfi\nNi\nFi\n\n\n\n(5,10]\n3\n0.1034483\n3\n0.1034483\n\n\n(10,15]\n9\n0.3103448\n12\n0.4137931\n\n\n(15,20]\n9\n0.3103448\n21\n0.7241379\n\n\n(20,25]\n4\n0.1379310\n25\n0.8620690\n\n\n(25,30]\n4\n0.1379310\n29\n1.0000000\n\n\n\n\n\n\n\nPara agrupar los datos en intervalos se puede utilizar la función cut del paquete base de R y añadir una nueva columna al data frame con la clase a la que pertenece cada individuo con la función mutate.\nDespués, podemos obtener la tabla de frecuencias podemos usar la función count del paquete dplyr de tidyverse.\nPosteriormente podemos añadir nuevas columnas a la tabla de frecuencias mediante la función mutate y fórmulas para calcular las frecuencias relativas (n/sum(n)), frecuencias absolutas acumuladas (cumsum(n)) y frecuencias relativas acumuladas (cumsum(n)/sum(n)).\n\nlibrary(knitr)\n# Añadimos una nueva columna al data frame con la clase a la que pertenece cada individuo.\ndf |&gt; mutate(urgencias_int = cut(urgencias, breaks = seq(5, 30, 5))) |&gt; \n    # Calculamos la tabla de frecuencias absolutas.\n    count(urgencias_int) |&gt;\n    # Añadimos nuevas columnas con la frecuencia relativa, acumulada y relativa acumulada.\n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) |&gt;\n    kable()\n\n\n\nurgencias_int\nn\nfi\nNi\nFi\n\n\n\n(5,10]\n3\n0.1034483\n3\n0.1034483\n\n\n(10,15]\n9\n0.3103448\n12\n0.4137931\n\n\n(15,20]\n9\n0.3103448\n21\n0.7241379\n\n\n(20,25]\n4\n0.1379310\n25\n0.8620690\n\n\n(25,30]\n4\n0.1379310\n29\n1.0000000\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar el histograma de frecuencias absolutas, relativas, absolutas acumuladas y relativas acumuladas correspondiente a la tabla anterior.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar un histograma de frecuencias absolutas podemos usar la función hist del paquete graphics.\nParámetros:\n\n\nbreaks: Un vector con los puntos de corte de los intervalos de las barras.\n\ncol: color de las barras.\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\nDespués se puede cambiar el campo counts del histograma para indicar la altura de las barras. Para volver a dibujar el histograma, una vez modificadas las alturas de las barras, se tiene que utilizar la función plot del paquete graphics.\n\n# Histograma de frecuencias absolutas.\nhisto &lt;- hist(df$urgencias, breaks = seq(5, 30, 5), col = \"steelblue\", main = \"Distribución del número de urgencias\", xlab = \"urgencias\", ylab = \"Frecuencia absoluta\")\n\n\n\n\n\n\nni &lt;- histo$counts\n\n# Histograma de frecuencias relativas.\n# Modificamos el campo counts del histograma para que contenga las frecuencias relativas.\nhisto$counts &lt;- ni/sum(ni)\nplot(histo, col = \"steelblue\", main = \"Distribución del número de urgencias\", xlab = \"urgencias\", ylab = \"Frecuencia relativa\")\n\n\n\n\n\n\n# Histograma de frecuencias absolutas acumuladas.\n# Modificamos el campo counts del histograma para que contenga las frecuencias absolutas acumuladas.\nhisto$counts &lt;- cumsum(ni)\nplot(histo, col = \"steelblue\", main = \"Distribución acumulada del número de urgencias\", xlab = \"urgencias\", ylab = \"Frecuencia absoluta acumulada\")\n\n\n\n\n\n\n# Histograma de frecuencias relativas acumuladas.\n# Modificamos el campo counts del histograma para que contenga las frecuencias relativas.\nhisto$counts &lt;- cumsum(ni)/sum(ni)\nplot(histo, col = \"steelblue\", main = \"Distribución acumulada del número de urgencias\", xlab = \"urgencias\", ylab = \"Frecuencia relativa acumulada\", )\n\n\n\n\n\n\n\n\n\nPara dibujar un histograma podemos usar la funcióngeom_histogram del paquete ggplot2 de tidyverse.\nParámetros:\n\n\nbreaks: Un vector con los puntos de corte de los intervalos de las barras.\n\ncolor: Color del borde de las barras.\n\nfill: Color de relleno de las barras.\n\nPara dibujar el histograma de frecuencias relativas o acumuladas, se le pude pasar como parámetro la función after_stat a la dimesión y.\n\n\nafter_stat(count/sum(count)): para las frecuencias relativas.\n\nafter_stat(cumsum(count)): para las frecuencias absolutas acumuladas.\n\nafter_stat(cumsum(count)/sum(count)): para las frecuencias relativas acumuladas.\n\n\n# Histograma de frecuencias absolutas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = urgencias)) +\n    # Añadimos la geometría de histograma creando clases de amplitud 5 desde 5 hasta 30.\n    geom_histogram(breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") + \n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución del número de urgencias\", x = \"Número de urgencias\", y = \"Frecuencia absoluta\")\n\n\n\n\n\n\n# Histograma de frecuencias relativas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = urgencias)) +\n    # Añadimos la geometría de histograma y asignamos a la dimensión y las frecuencias relativas.\n    geom_histogram(aes(y = after_stat(count/sum(count))), breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución del número de urgencias\", x = \"Número de urgencias\", y = \"Frecuencia relativa\")\n\n\n\n\n\n\n# Histograma de frecuencias acumuladas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = urgencias)) +\n    # Añadimos la geometría de histograma y asignamos a la dimensión y las frecuencias absolutas acumuladas.\n    geom_histogram(aes(y = after_stat(cumsum(count))), breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución acumulada del número de urgencias\", x = \"Número de urgencias\", y = \"Frecuencia absoluta acumulada\")\n\n\n\n\n\n\n# Histograma de frecuencias relativas acumuladas\n# Añadimos la variable a la dimensión x.\ndf |&gt; ggplot(aes(x = urgencias)) +\n    # Añadimos la geometría de histograma y asignamos a la dimensión y las frecuencias relativas acumuladas. \n    geom_histogram(aes(y = after_stat(cumsum(count)/sum(count))),  breaks = seq(5, 30, 5), fill = \"steelblue\", col = \"white\") +\n\n    labs(title = \"Distribución acumulada del número de urgencias\", x = \"Número de urgencias\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar el polígono de frecuencias relativas acumuladas (ojiva).\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar el polígono de frecuencias relativas acumuladas podemos usar la función plot del paquete graphics.\nParámetros:\n\n\nx: vector con las coordenadas x de los vértices del polígono.\n\ny: vector con las coordenadas y de los vértices del polígono.\n\ntype: tipo de gráfico. Para un polígono de frecuencias se usa \"l\" (línea).\n\ncol: color de la línea.\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\n\n# Ojiva\n# Definimos los puntos de corte de los intervalos.\ncortes = seq(5, 30, 5)\n# Calculamos las frecuencias absolutas agrupando en 5 clases.\nni &lt;- table(cut(df$urgencias, breaks = cortes))\n# Calculamos las frecuencias relativas acumuladas.\nFi &lt;- c(0, cumsum(ni)/sum(ni))\n# Dibujamos el polígono de frecuencias relativas acumuladas.\nplot(cortes, Fi, type = \"l\", col = \"steelblue\", main = \"Distribución acumulada del número de urgencias\", xlab = \"Número de urgencias\", ylab = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\nPara dibujar el polígono de frecuencias relativas acumuladas podemos usar la función geom_line del paquete ggplot2 de tidyverse.\n\n# Ojiva\n# Definimos los puntos de corte de los intervalos.\ncortes &lt;- seq(5, 30, 5)\n# Añadimos una nueva columna al data frame con la clase a la que pertenece cada individuo, tomando 5 intervalos desde 5 hasta 30.\ntabla_frec &lt;- df |&gt; mutate(urgencias_int = cut(df$urgencias, breaks = cortes)) |&gt; \n    # Calculamos las frecuencias absolutas de cada clase.\n    count(urgencias_int) |&gt;\n    # Añadimos una nueva columna con las frecuencias relativas acumuladas.\n    mutate(cortes = cortes[-1], Fi = cumsum(n)/sum(n)) |&gt;\n    # Seleccionamos las columnas que nos interesan.\n    select(cortes, Fi) \n# Añadimos una fila con el primer punto de corte y frecuencia relativa acumulada 0.\ntabla_frec &lt;- rbind(data.frame(cortes = cortes[1], Fi = 0), tabla_frec)\n# Dibujamos el polígono de frecuencias relativas acumuladas.\n# Añadimos los cortes a la dimensión x y las frecuencias relativas acumuladas a\nggplot(tabla_frec, aes(x = cortes , y = Fi)) +\n    # Añadimos la geometría de líneas.\n    geom_line(col = \"steelblue\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución del número de urgencias\", x = \"Número de urgencias\", y = \"Frecuencia relativa acumulada\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 4.3 Los grupos sanguíneos de una muestra de 30 personas son:\n\\[\n\\begin{array}{c}\n\\mbox{A, B, B, A, AB, 0, 0, A, B, B, A, A, A, A, AB, A, A, A, B, 0, B, B, B, A, A, A, 0, A, AB, 0}\n\\end{array}\n\\]\n\n\nCrear un conjunto de datos con la variable grupo_sanguíneo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- data.frame(grupo_sanguineo = c(\"A\", \"B\", \"B\", \"A\", \"AB\", \"0\", \"0\", \"A\", \"B\", \"B\", \"A\", \"A\", \"A\", \"A\", \"AB\", \"A\", \"A\", \"A\", \"B\", \"0\", \"B\", \"B\", \"B\", \"A\", \"A\", \"A\", \"0\", \"A\", \"AB\", \"0\"))\n\n\n\n\nlibrary(tidyverse)\ndf &lt;- tibble(grupo_sanguineo = c(\"A\", \"B\", \"B\", \"A\", \"AB\", \"0\", \"0\", \"A\", \"B\", \"B\", \"A\", \"A\", \"A\", \"A\", \"AB\", \"A\", \"A\", \"A\", \"B\", \"0\", \"B\", \"B\", \"B\", \"A\", \"A\", \"A\", \"0\", \"A\", \"AB\", \"0\"))\n\n\n\n\n\n\n\n\n\nConstruir la tabla de frecuencias.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara obtener las frecuencias absolutas se puede usar la función table, y para las frecuencias relativas la función prop.table ambas del paquete base de R.\n\nlibrary(knitr)\n# Frecuencias absolutas.\nni &lt;- table(df$grupo_sanguineo)\n# Frecuencias relativas\nfi &lt;- prop.table(ni)\ntabla_frec &lt;- cbind(ni, fi)\nkable(tabla_frec)\n\n\n\n\nni\nfi\n\n\n\n0\n5\n0.1666667\n\n\nA\n14\n0.4666667\n\n\nAB\n3\n0.1000000\n\n\nB\n8\n0.2666667\n\n\n\n\n\n\n\nPara obtener la tabla de frecuencias absolutas podemos usar la función count del paquete dplyr de tidyverse.\nPosteriormente podemos añadir nuevas columnas a la tabla de frecuencias mediante la función mutate y la fórmula para calcular las frecuencias relativas (n/sum(n)).\n\nlibrary(knitr)\n# Calculamos la tabla de frecuencias absolutas.\ndf |&gt; count(grupo_sanguineo) |&gt; \n    # Añadimos una nueva columna con las frecuencias relativas.\n    mutate(fi = n/sum(n)) |&gt;\n    kable()\n\n\n\ngrupo_sanguineo\nn\nfi\n\n\n\n0\n5\n0.1666667\n\n\nA\n14\n0.4666667\n\n\nAB\n3\n0.1000000\n\n\nB\n8\n0.2666667\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar el diagrama de sectores.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar el diagrama de sectores podemos usar la función pie del paquete graphics.\nParámetros:\n\n\nx: vector con las frecuencias.\n\ncol: vector con los colores de los sectores.\n\nmain: título del gráfico.\n\n\npie(ni, col = 1:length(ni), main = \"Distribución de los grupos sanguíneos\")\n\n\n\n\n\n\n\n\n\nPara dibujar el diagrama de sectores podemos usar la función geom_bar y después la función coor_polar del paquete ggplot2 de tidyverse.\nParámetros:\n\n\ntheta = Dimensión que contiene las frecuencias.\n\n\n# Añadimos la variable a la dimensión fill, y dejamos la dimensión x vacía.\ndf |&gt; ggplot(aes(x = \"\", fill = grupo_sanguineo)) +\n    # Añadimos la geometría de barras.\n    geom_bar(color = \"white\") +\n    # Cambiamos a coordenadas polares.\n    coord_polar(theta = \"y\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución de los grupos sanguíneos\", fill = \"Grupo sanguíneo\") +\n    # Eliminamos los ejes y el fondo del gráfico.\n    theme_void() \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEjercicio 4.4 En un estudio de población se tomó una muestra de 27 personas, y se les preguntó por su edad y estado civil, obteniendo los siguientes resultados:\n\n\nEstado civil\nEdad\n\n\n\nSoltero\n31, 45, 35, 65, 21, 38, 62, 22, 31\n\n\nCasado\n62, 39, 62, 59, 21, 62\n\n\nViudo\n80, 68, 65, 40, 78, 69, 75\n\n\nDivorciado\n31, 65, 59, 49, 65\n\n\n\n\n\nCrear un conjunto de datos con la variables estado_civil y edad.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- data.frame(\n    edad = c(31, 45, 35, 65, 21, 38, 62, 22, 31, 62, 39, 62, 59, 21, 62, 80, 68, 65, 40, 78, 69, 75, 31, 65, 59, 49, 65), \n    estado_civil = rep(c(\"Soltero\", \"Casado\", \"Viudo\", \"Divorciado\"), c(9, 6, 7, 5)))\n\n\n\n\ndf &lt;- tibble(\n    edad = c(31, 45, 35, 65, 21, 38, 62, 22, 31, 62, 39, 62, 59, 21, 62, 80, 68, 65, 40, 78, 69, 75, 31, 65, 59, 49, 65), \n    estado_civil = rep(c(\"Soltero\", \"Casado\", \"Viudo\", \"Divorciado\"), c(9, 6, 7, 5)))\n\n\n\n\n\n\n\n\n\nCalcular las frecuencias absolutas del estado_civil.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara obtener las frecuencias absolutas se puede usar la función table del paquete base de R.\n\nlibrary(knitr)\ntable(df$estado_civil) |&gt; kable()\n\n\n\nVar1\nFreq\n\n\n\nCasado\n6\n\n\nDivorciado\n5\n\n\nSoltero\n9\n\n\nViudo\n7\n\n\n\n\n\n\n\nPara obtener la tabla de frecuencias absolutas podemos usar la función count del paquete dplyr de tidyverse.\n\nlibrary(knitr)\n# Calculamos las frecuencias absolutas del estado civil.\ndf |&gt; count(estado_civil)\n\n\n\n\nestado_civil\nn\n\n\n\nCasado\n6\n\n\nDivorciado\n5\n\n\nSoltero\n9\n\n\nViudo\n7\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nConstruir la tabla de frecuencias de la variable edad para cada categoría de la variable estado_civil.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara dividir el data frame en grupos podemos usar la función group-by del paquete dplyr de tidyverse indicando la variable de agrupación.\nDespués podemos usar la función count del paquete dplyr de tidyverse para obtener la tabla de frecuencias absolutas.\n\n# Añadimos una nueva columna al data frame con la clase a la que pertenece cada individuo, tomando intervalos de amplitud 10 desde 20 hasta 80.\ndf |&gt; mutate(edad_int = cut(edad, breaks = seq(20, 80, 10))) |&gt;\n    # Agrupamos por estado civil.\n    group_by(estado_civil) |&gt;\n    # Calculamos las frecuencias absolutas.\n    count(edad_int) |&gt; \n    # Añadimos nuevas columnas con las frecuencias relativas, acumuladas y relativas acumuladas.\n    mutate(fi = n/sum(n), Ni = cumsum(n), Fi = cumsum(n)/sum(n)) |&gt;\n    kable()\n\n\n\nestado_civil\nedad_int\nn\nfi\nNi\nFi\n\n\n\nCasado\n(20,30]\n1\n0.1666667\n1\n0.1666667\n\n\nCasado\n(30,40]\n1\n0.1666667\n2\n0.3333333\n\n\nCasado\n(50,60]\n1\n0.1666667\n3\n0.5000000\n\n\nCasado\n(60,70]\n3\n0.5000000\n6\n1.0000000\n\n\nDivorciado\n(30,40]\n1\n0.2000000\n1\n0.2000000\n\n\nDivorciado\n(40,50]\n1\n0.2000000\n2\n0.4000000\n\n\nDivorciado\n(50,60]\n1\n0.2000000\n3\n0.6000000\n\n\nDivorciado\n(60,70]\n2\n0.4000000\n5\n1.0000000\n\n\nSoltero\n(20,30]\n2\n0.2222222\n2\n0.2222222\n\n\nSoltero\n(30,40]\n4\n0.4444444\n6\n0.6666667\n\n\nSoltero\n(40,50]\n1\n0.1111111\n7\n0.7777778\n\n\nSoltero\n(60,70]\n2\n0.2222222\n9\n1.0000000\n\n\nViudo\n(30,40]\n1\n0.1428571\n1\n0.1428571\n\n\nViudo\n(60,70]\n3\n0.4285714\n4\n0.5714286\n\n\nViudo\n(70,80]\n3\n0.4285714\n7\n1.0000000\n\n\n\n\n\n\n\n\n\n\nDibujar los diagramas de cajas de la edad según el estado civil. ¿Existen datos atípicos? ¿En qué grupo hay mayor dispersión?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara dibujar un diagrama de caja y bigotes podemos usar la función boxplot del paquete graphics.\nParámetros:\n\n\nformula: fórmula que relaciona la variable dependiente con la variable independiente (en este caso edad ~ estado_civil).\n\ndata: data frame con los datos.\n\ncol: color de la caja.\n\nhorizontal: orientación horizontal de la caja (True o False).\n\nwidth: anchura de la caja (valor entre 0 y 1).\n\nmain: título del gráfico.\n\nxlab: etiqueta del eje x.\n\nylab: etiqueta del eje y.\n\n\nboxplot(edad ~ estado_civil, data = df, horizontal = T, col = \"steelblue\", main = \"Distribución de la edad según el estado civil\", xlab = \"Edad\", ylab = \"Estado civil\")\n\n\n\n\n\n\n\n\n\nPara dibujar un diagrama de caja y bigotes podemos usar la función geom_boxplot del paquete ggplot2 de tidyverse.\nParámetros:\n\ncolor: color del borde de la caja.\nfill: factor con las categorías que dividen en grupos las cajas (en este caso estado_civil). Dibuja una caja por cada categoría.\nwidth: anchura de la caja (valor entre 0 y 1).\n\n\n# Añadimos la variable a la dimensión x y el estado civil a la dimensión fill.\ndf |&gt; ggplot(aes(x = edad, fill = estado_civil)) +\n    # Añadimos la geometría de cajas.\n    geom_boxplot() +\n    # Eliminamos las marcas del eje y.\n    scale_y_continuous(breaks = NULL) +\n    # Añadimos el título y las etiquetas de los ejes y leyenda.\n    labs(title = \"Distribución de la edad según el estado civil\", x = \"Edad\", fill = \"Estado civil\") \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nDibujar los histogramas de la edad según el estado civil.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nPara dibujar un histograma podemos usar la funcióngeom_histogram del paquete ggplot2 de tidyverse.\nParámetros:\n\n\nbreaks: Un vector con los puntos de corte de los intervalos de las barras.\n\ncolor: Color del borde de las barras.\n\nfill: factor con las categorías que dividen en grupos las cajas (en este caso estado_civil). Dibuja una caja por cada categoría.\n\nposition: Posición de las barras (“identity” para superponer las barras, “stack” para apilar las barras y “dodge” para que las barras no se superpongan).\n\nalpha: Transparencia de las barras (valor entre 0 y 1).\n\n\n# Añadimos la variable a la dimensión x y el estado civil a la dimensión fill.\ndf |&gt; ggplot(aes(x = edad, fill = estado_civil)) +\n    # Añadimos la geometría de histograma creando clases de amplitud 10 desde 20 hasta 80.\n    geom_histogram(breaks = seq(20, 80, 10), position = \"stack\") +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución de la edad según el estado civil\", x = \"Edad\", y = \"Frecuencia\", fill = \"Estado civil\") \n\n\n\n\n\n\n\nPara dibujar cada histograma por separado se puede usar la función facet_wrap o facet_grid del paquete ggplot2 de tidyverse.\n\n# Añadimos la variable a la dimensión x y el estado civil a la dimensión fill.\ndf |&gt; ggplot(aes(x = edad, fill = estado_civil)) +\n   # Añadimos la geometría de histograma creando clases de amplitud 10 desde 20 hasta 80.\n    geom_histogram(breaks = seq(20, 80, 10)) +\n    # Añadimos facetas el estado civil.\n    facet_wrap(~ estado_civil) +\n    # Añadimos el título y las etiquetas de los ejes.\n    labs(title = \"Distribución de la edad según el estado civil\", x = \"Edad\", y = \"Frecuencia\", fill = \"Estado civil\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Distribuciones de frecuencias y representaciones gráficas</span>"
    ]
  },
  {
    "objectID": "04-frecuencias-graficos.html#ejercicios-propuestos",
    "href": "04-frecuencias-graficos.html#ejercicios-propuestos",
    "title": "\n4  Distribuciones de frecuencias y representaciones gráficas\n",
    "section": "\n4.2 Ejercicios propuestos",
    "text": "4.2 Ejercicios propuestos\n\nEjercicio 4.5 El número de lesiones padecidas durante una temporada por cada jugador de un equipo de fútbol fue el siguiente:\n\\[\n\\begin{array}{c}\n0, 1, 2, 1, 3, 0, 1, 0, 1, 2, 0, 1, \\\\\n1, 1, 2, 0, 1, 3, 2, 1, 2, 1, 0, 1.\n\\end{array}\n\\]\n\nConstruir la tabla de frecuencias.\nDibujar el diagrama de barras de las frecuencias relativas y de frecuencias relativas acumuladas.\nDibujar el diagrama de sectores.\n\n\n\nEjercicio 4.6 Para realizar un estudio sobre la estatura de los estudiantes universitarios, seleccionamos, mediante un proceso de muestreo aleatorio, una muestra de 30 estudiantes, obteniendo los siguientes resultados (medidos en centímetros):\n\\[\n\\begin{array}{c}\n179, 173, 181, 170, 158, 174, 172, 166, 194, 185,\\\\\n162, 187, 198, 177, 178, 165, 154, 188, 166, 171,\\\\\n175, 182, 167, 169, 172, 186, 172, 176, 168, 187.\n\\end{array}\n\\]\n\nDibujar el histograma de las frecuencias absolutas agrupando desde 150 a 200 en clases de amplitud 10.\nDibujar el diagrama de cajas. ¿Existe algún dato atípico?\n\n\n\nEjercicio 4.7 El conjunto de datos neonatos contiene información sobre una muestra de 320 recién nacidos en un hospital durante un año que cumplieron el tiempo normal de gestación.\n\nConstruir la tabla de frecuencias de la puntuación Apgar al minuto de nacer. Si se considera que una puntuación Apgar de 3 o menos indica que el neonato está deprimido, ¿qué porcentaje de niños está deprimido en la muestra?\nComparar las distribuciones de frecuencias de las puntuaciones Apgar al minuto de nacer según si la madre es mayor o menor de 20 años. ¿En qué grupo hay más neonatos deprimidos?\nConstruir la tabla de frecuencias para el peso de los neonatos, agrupando en clases de amplitud \\(0.5\\) desde el \\(2\\) hasta el \\(4.5\\). ¿En qué intervalo de peso hay más neonatos?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fuma o no. Si se considera como peso bajo un peso menor de \\(2.5\\) kg, ¿En qué grupo hay un mayor porcentaje de niños con peso bajo?\nConstruir el diagrama de barras de la puntuación Apgar al minuto. ¿Qué puntuación Apgar es la más frecuente?\nConstruir el diagrama de frecuencias relativas acumuladas de la puntuación Apgar al minuto. ¿Por debajo de que puntuación estarán la mitad de los niños?\nComparar mediante diagramas de barras de frecuencias relativas las distribuciones de las puntuaciones Apgar al minuto según si la madre ha fumado o no durante el embarazo. ¿Qué se puede concluir?\nConstruir el histograma de pesos, agrupando en clases de amplitud \\(0.5\\) desde el \\(2\\) hasta el \\(4.5\\). ¿En qué intervalo de peso hay más niños?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fuma o no. ¿En qué grupo se aprecia menor peso de los niños de la muestra?\nComparar la distribución de frecuencias relativas del peso de los neonatos según si la madre fumaba o no antes del embarazo. ¿Qué se puede concluir?\nConstruir el diagrama de caja y bigotes del peso. ¿Entre qué valores se considera que el peso de un neonato es normal? ¿Existen datos atípicos?\nComparar el diagrama de cajas y bigotes del peso, según si la madre fumó o no durante el embarazo y si era mayor o no de 20 años. ¿En qué grupo el peso tiene más dispersión central? ¿En qué grupo pesan menos los niños de la muestra?\nComparar el diagrama de cajas de la puntuación Apgar al minuto y a los cinco minutos. ¿En qué variable hay más dispersión central?",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Distribuciones de frecuencias y representaciones gráficas</span>"
    ]
  },
  {
    "objectID": "05-descriptiva.html",
    "href": "05-descriptiva.html",
    "title": "\n5  Estadística Descriptiva\n",
    "section": "",
    "text": "5.1 Ejercicios Resueltos\nEsta práctica contiene ejercicios que muestran cómo realizar un análisis descriptivo de un conjunto de datos mediante estadísticos muestrales, como por ejemplo:\nPara la realización de esta práctica se requieren los siguientes paquetes:",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estadística Descriptiva</span>"
    ]
  },
  {
    "objectID": "05-descriptiva.html#ejercicios-resueltos",
    "href": "05-descriptiva.html#ejercicios-resueltos",
    "title": "\n5  Estadística Descriptiva\n",
    "section": "",
    "text": "library(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\nlibrary(DescTools) # para el cálculo de la moda.\nlibrary(moments) # para el cálculo del coeficiente de asimetría y apuntamiento.\nlibrary(vtable) # para resúmenes estadísticos.\nlibrary(skimr) # para resúmenes estadísticos.\nlibrary(summarytools) # para resúmenes estadísticos.\nlibrary(knitr) # para el formateo de tablas.\n\nEjercicio 5.1 Se realizó una encuesta a 40 personas de más de 70 años sobre el número de medicamentos distintos que tomaban habitualmente. El resultado de dicha encuesta fue el siguiente:\n\n\n\n\n3 − 1 − 2 − 2 − 0 − 1 − 4 − 2 − 3 − 5 − 1 − 3 − 2 − 3 − 1 − 4 − 2 − 4 − 3 − 2\n\n\n3 − 5 − 0 − 1 − 2 − 0 − 2 − 3 − 0 − 1 − 1 − 5 − 3 − 4 − 2 − 3 − 0 − 1 − 2 − 3\n\n\n\n\n\nCrear un conjunto de datos con la variable medicamentos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- data.frame(medicamentos = c(3, 1, 2, 2, 0, 1, 4, 2, 3, 5, 1, 3, 2, 3, 1, 4, 2, 4, 3, 2, 3, 5, 0, 1, 2, 0, 2, 3, 0, 1, 1, 5, 3, 4, 2, 3, 0, 1, 2, 3))\n\n\n\n\nlibrary(tidyverse)\ndf &lt;- tibble(medicamentos = c(3, 1, 2, 2, 0, 1, 4, 2, 3, 5, 1, 3, 2, 3, 1, 4, 2, 4, 3, 2, 3, 5, 0, 1, 2, 0, 2, 3, 0, 1, 1, 5, 3, 4, 2, 3, 0, 1, 2, 3))\n\n\n\n\n\n\n\n\n\nCalcular el tamaño muestral.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nEl tamaño muestral generalmente es el número de filas del data frame. Para calcular el número de filas podemos usar la función nrow del paquete base de R.\n\nnrow(df)\n\n[1] 40\n\n\n\n\nEl tamaño muestral generalmente es el número de filas del data frame. Para calcular el número de filas podemos usar la función la función count del paquete dplyr de tidyverse.\n\nlibrary(knitr)\ncount(df) |&gt; kable()\n\n\n\nn\n\n\n40\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la media.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular la media con la función mean del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular la media.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la media.\n\n\nmean(df$medicamentos)\n\n[1] 2.225\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la media hay que pasarle como argumento la función mean del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular la media.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la media.\n\n\ndf |&gt; summarise(media = mean(medicamentos)) |&gt; \n    kable()\n\n\n\nmedia\n\n\n2.225\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la mediana.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular la mediana con la función median del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular la mediana.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la mediana.\n\n\nmedian(df$medicamentos)\n\n[1] 2\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la mediana hay que pasarle como argumento la función median del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular la mediana.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la mediana.\n\n\ndf |&gt; summarise(mediana = median(medicamentos)) |&gt;\n    kable()\n\n\n\nmediana\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la moda.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara calcular la moda podemos usar la función Mode del paquete DescTools.\nParámetros:\n\n\nx: vector numérico del que calcular la moda.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la moda.\n\n\nlibrary(DescTools)\nMode(df$medicamentos, na.rm = TRUE)\n\n[1] 2 3\nattr(,\"freq\")\n[1] 10\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la moda podemos usar la función Mode del paquete DescTools.\nParámetros:\n\n\nx: vector numérico del que calcular la moda.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la moda.\n\n\nlibrary(tidyverse) \ndf |&gt; summarise(moda = Mode(medicamentos, na.rm = TRUE)) |&gt;\n    kable()\n\n\n\nmoda\n\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\nExisten dos modas 2 y 3 que son los valores más frecuentes en el conjunto de datos. Por tanto, el conjunto de datos es bimodal.\n\n\n\n\n\nCalcular el mínimo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular el mínimo con la función min del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el mínimo.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el mínimo.\n\n\nmin(df$medicamentos)\n\n[1] 0\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el mínimo hay que pasarle como argumento la función min del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el mínimo.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el mínimo.\n\n\ndf |&gt; summarise(mínimo = min(medicamentos, na.rm = TRUE))\n\n\n\n\nmínimo\n\n\n0\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el máximo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular el máximo con la función max del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el máximo.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el máximo.\n\n\nmax(df$medicamentos)\n\n[1] 5\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el máximo hay que pasarle como argumento la función max del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el máximo.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el máximo.\n\n\ndf |&gt; summarise(máximo = max(medicamentos))\n\n\n\n\nmáximo\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular los cuartiles.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular los cuartiles con la función quantile del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular los cuartiles.\n\nprobs: vector de probabilidades para calcular los cuartiles. Por defecto es c(0, 0.25, 0.5, 0.75, 1).\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular los cuartiles.\n\n\nquantile(df$medicamentos, prob = c(0.25, 0.5, 0.75))\n\n25% 50% 75% \n  1   2   3 \n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular los cuartiles hay que pasarle como argumento la función quantile del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular los cuartiles.\n\nprobs: vector de probabilidades para calcular los cuartiles. Por defecto es c(0, 0.25, 0.5, 0.75, 1).\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular los cuartiles.\n\nEs necesario usar la función unnest del paquete tidyr para desanidar el resultado de la función quantile.\n\ndf |&gt; summarise(cuartiles = list(quantile(medicamentos, prob = c(0.25, 0.5, 0.75)))) |&gt;\n    unnest(cuartiles) |&gt; \n    kable()\n\n\n\ncuartiles\n\n\n\n1\n\n\n2\n\n\n3\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular los percentiles 5 y 95.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular los percentiles también con la función quantile del paquete base de R, simplemente indicando el vector de probabilidades acumuladas correspondientes a los percentiles que queremos calcular.\n\nquantile(df$medicamentos, prob = c(0.05, 0.95))\n\n 5% 95% \n  0   5 \n\n\n\n\nPodemos calcular los percentiles también con la función quantile del paquete base de R, simplemente indicando el vector de probabilidades acumuladas correspondientes a los percentiles que queremos calcular.\n\ndf |&gt; summarise(percentiles = list(quantile(medicamentos, prob = c(0.05, 0.95)))) |&gt;\n    unnest(percentiles) |&gt; \n    kable()\n\n\n\npercentiles\n\n\n\n0\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el rango.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\nmax(df$medicamentos) - min(df$medicamentos)\n\n[1] 5\n\n\n\n\n\ndf |&gt; summarise(rango = max(medicamentos) - min(medicamentos)) |&gt;\n    kable()\n\n\n\nrango\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el rango intercuartílico.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos calcular el rango intercuartílico con la función IQR del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el rango intercuartílico.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el rango intercuartílico.\n\n\nIQR(df$medicamentos)\n\n[1] 2\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el rango intercuartílico hay que pasarle como argumento la función IQR del paquete base de R.\nParámetros:\n\n\nx: vector numérico del que calcular el rango intercuartílico.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el rango intercuartílico.\n\n\ndf |&gt; summarise(IQR = IQR(medicamentos)) |&gt;\n    kable()\n\n\n\nIQR\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la varianza\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos usar la función var del paquete stats de R para calcular la cuasivarianza o varianza corregida \\(\\sum \\frac{(x_i-\\bar x)^2}{n-1}\\). Para calcular la varianza hay que corregir la cuasivarianza multiplicando por \\(\\frac{n-1}{n}\\), donde \\(n\\) es el tamaño muestral.\nParámetros:\n\n\nx: vector numérico del que calcular la cuasivarianza.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la cuasivarianza.\n\n\nn &lt;- nrow(df)\n# Cuasivarianza\nprint(paste(\"Cuasivarianza:\", var(df$medicamentos)))\n\n[1] \"Cuasivarianza: 2.025\"\n\n# Varianza\nprint(paste(\"Varianza: \", var(df$medicamentos)*(n-1)/n))\n\n[1] \"Varianza:  1.974375\"\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la cuasivarianza hay que pasarle como argumento la función var del paquete stats de R. Para calcular la varianza hay que corregir la cuasivarianza multiplicando por \\(\\frac{n-1}{n}\\), donde \\(n\\) es el tamaño muestral.\nParámetros:\n\n\nx: vector numérico del que calcular la cuasivarianza.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la cuasivarianza.\n\n\n\ndf |&gt; summarise(cuasivarianza = var(medicamentos), \n    varianza = var(medicamentos)*(n()-1)/n()) |&gt; \n    kable()\n\n\n\ncuasivarianza\nvarianza\n\n\n2.025\n1.974375\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la desviación típica.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPodemos usar la función sd del paquete stats de R para calcular la cuasidesviación típica o desviación típica corregida \\(\\sqrt{\\sum \\frac{(x_i-\\bar x)^2}{n-1}}\\). Para calcular la desviación típica hay que corregir la cuasidesviación típica multiplicando por \\(\\sqrt{\\frac{n-1}{n}}\\), donde \\(n\\) es el tamaño muestral.\nParámetros:\n\n\nx: vector numérico del que calcular la cuasivarianza.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la cuasivarianza.\n\n\nn &lt;- nrow(df)\n# Cuasidesviación típica\nprint(paste(\"Cuasidesviación típica:\", sd(df$medicamentos)))\n\n[1] \"Cuasidesviación típica: 1.42302494707577\"\n\n# Desviación típica\nprint(paste(\"Desviación típica: \", sd(df$medicamentos)*sqrt((n-1)/n)))\n\n[1] \"Desviación típica:  1.40512454963964\"\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la cuasivarianza hay que pasarle como argumento la función sd del paquete stats de R para calcular la cuasidesviación típica o desviación típica corregida \\(\\sqrt{\\sum \\frac{(x_i-\\bar x)^2}{n-1}}\\). Para calcular la desviación típica hay que corregir la cuasidesviación típica multiplicando por \\(\\sqrt{\\frac{n-1}{n}}\\), donde \\(n\\) es el tamaño muestral.\nParámetros:\n\n\nx: vector numérico del que calcular la cuasivarianza.\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular la cuasivarianza.\n\n\ndf |&gt; summarise(cuasidesviación = sd(medicamentos), \n    desviación = sd(medicamentos)*sqrt((n()-1)/n())) |&gt; \n    kable()\n\n\n\ncuasidesviación\ndesviación\n\n\n1.423025\n1.405125\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el coeficiente de variación.\n\n\n\n\n\n\nSolución\n\n\n\n\n\nNo existe una función en R para calcular el coeficiente de variación, pero se puede calcular dividiendo la desviación típica entre el valor absoluto de la media. Se suele expresar como porcentaje multiplicando por 100.\n\n\nBase\ntidyverse\n\n\n\n\nsd(df$medicamentos, na.rm = TRUE) / abs(mean(df$medicamentos, na.rm = TRUE)) * 100\n\n[1] 63.95618\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el coeficiente de variación se divide la desviación típica entre el valor absoluto de la media y se multiplica por 100 para expresarlo como porcentaje.\n\ndf |&gt; summarise(coef_variacion = sd(medicamentos, na.rm = TRUE) / abs(mean(medicamentos, na.rm = TRUE)) * 100) |&gt; \n    kable()\n\n\n\ncoef_variacion\n\n\n63.95618\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el coeficiente de asimetría.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara calcular el coeficiente de asimetría podemos usar la función skewness del paquete moments.\nParámetros:\n\n\nx: vector numérico del que calcular el coeficiente de asimetría\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el coeficiente de asimetría.\n\n\nlibrary(moments)\nskewness(df$medicamentos, na.rm = TRUE)\n\n[1] 0.1913698\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el coeficiente de asimetría podemos usar la función skewness del paquete moments.\nParámetros:\n\n\nx: vector numérico del que calcular el coeficiente de asimetría\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el coeficiente de asimetría.\n\n\nlibrary(moments)\ndf |&gt; summarise(coef_asimetria = skewness(medicamentos, na.rm = TRUE)) |&gt; \n    kable()\n\n\n\ncoef_asimetria\n\n\n0.1913698\n\n\n\n\n\n\n\nComo \\(g_1\\) está próxima a \\(0\\), la distribución es casi simétrica.\n\n\n\n\n\nCalcular el coeficiente de apuntamiento.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara calcular el coeficiente de apuntamiento podemos usar la función kurtosis del paquete moments.\nParámetros:\n\n\nx: vector numérico del que calcular el coeficiente de apuntamiento\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el coeficiente de apuntamiento.\n\n\nlibrary(moments)\nkurtosis(df$medicamentos, na.rm = TRUE)\n\n[1] 2.320303\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular el coeficiente de apuntamiento podemos usar la función kurtosis del paquete moments.\nParámetros:\n\n\nx: vector numérico del que calcular el coeficiente de asimetría\n\nna.rm: si es TRUE se eliminan los valores perdidos antes de calcular el coeficiente de asimetría.\n\n\nlibrary(moments)\ndf |&gt; summarise(coef_apuntamiento = kurtosis(medicamentos, na.rm = TRUE)) |&gt; \n    kable()\n\n\n\ncoef_apuntamiento\n\n\n2.320303\n\n\n\n\n\n\n\nComo \\(g_2&gt;0\\), la distribución es más apuntada de lo normal (leptocúrtica). Como además \\(g_2\\not\\in(-2,2)\\) se puede concluir que la muestra es demasiado apuntada para provenir de una población normal.\n\n\n\n\n\n\n\nEjercicio 5.2 El fichero colesterol.csv contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\n\nCrear un data frame con los datos de todos los pacientes del estudio a partir del fichero colesterol.csv.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\n\ndf &lt;- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n\n\n\n\nlibrary(tidyverse)\ndf &lt;- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n\n\n\n\n\n\n\n\n\nObtener un resumen del data frame que muestre las variables que contiene, su tipo, el número de filas y el número de columnas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\nsummarytools\n\n\n\nPara obtener las variables de un data frame podemos usar la función str del paquete base de R.\nParámetros:\n\n\nobject: objeto del que obtener su estructura.\n\n\nstr(df)\n\nspc_tbl_ [14 × 6] (S3: spec_tbl_df/tbl_df/tbl/data.frame)\n $ nombre    : chr [1:14] \"José Luis Martínez Izquierdo\" \"Rosa Díaz Díaz\" \"Javier García Sánchez\" \"Carmen López Pinzón\" ...\n $ edad      : num [1:14] 18 32 24 35 46 68 51 22 35 46 ...\n $ sexo      : chr [1:14] \"H\" \"M\" \"H\" \"M\" ...\n $ peso      : num [1:14] 85 65 NA 65 51 66 62 60 90 75 ...\n $ altura    : num [1:14] 1.79 1.73 1.81 1.7 1.58 1.74 1.72 1.66 1.94 1.85 ...\n $ colesterol: num [1:14] 182 232 191 200 148 249 276 NA 241 280 ...\n - attr(*, \"spec\")=\n  .. cols(\n  ..   nombre = col_character(),\n  ..   edad = col_double(),\n  ..   sexo = col_character(),\n  ..   peso = col_double(),\n  ..   altura = col_double(),\n  ..   colesterol = col_double()\n  .. )\n - attr(*, \"problems\")=&lt;externalptr&gt; \n\n\n\n\nPara obtener las variables y sus tipos de un data frame podemos usar la función glimpse del paquete dplyr de tidyverse.\nParámetros:\n\n\ndata: data frame del que obtener las variables.\n\n\nglimpse(df)\n\nRows: 14\nColumns: 6\n$ nombre     &lt;chr&gt; \"José Luis Martínez Izquierdo\", \"Rosa Díaz Díaz\",…\n$ edad       &lt;dbl&gt; 18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 2…\n$ sexo       &lt;chr&gt; \"H\", \"M\", \"H\", \"M\", \"M\", \"H\", \"H\", \"M\", \"H\", \"H\",…\n$ peso       &lt;dbl&gt; 85, 65, NA, 65, 51, 66, 62, 60, 90, 75, 55, 78, 1…\n$ altura     &lt;dbl&gt; 1.79, 1.73, 1.81, 1.70, 1.58, 1.74, 1.72, 1.66, 1…\n$ colesterol &lt;dbl&gt; 182, 232, 191, 200, 148, 249, 276, NA, 241, 280, …\n\n\n\n\nPara obtener las variables y sus tipos de un data frame podemos usar la función dfSummary del paquete summarytools.\nParámetros:\n\n\nx: data frame del que obtener las variables.\n\n\nlibrary(summarytools)\nprint(dfSummary(df, plain.ascii = FALSE, style = \"grid\"), method = \"render\")\n\n\nData Frame Summary\ndf\nDimensions: 14 x 6\n  Duplicates: 0\n\n\n\n\n\n\n\n\n\n\n\nNo\nVariable\nStats / Values\nFreqs (% of Valid)\nGraph\nValid\nMissing\n\n\n\n1\nnombre [character]\n\n\n1. Antonio Fernández Ocaña\n\n\n2. Antonio Ruiz Cruz\n\n\n3. Carmen López Pinzón\n\n\n4. Carolina Rubio Moreno\n\n\n5. Javier García Sánchez\n\n\n6. José Luis Martínez Izquie\n\n\n7. José María de la Guía San\n\n\n8. Macarena Álvarez Luna\n\n\n9. Marisa López Collado\n\n\n10. Miguel Angel Cuadrado Gut\n\n\n[ 4 others ]\n\n\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n1\n(\n7.1%\n)\n\n\n4\n(\n28.6%\n)\n\n\n\n14 (100.0%)\n0 (0.0%)\n\n\n2\nedad [numeric]\n\n\nMean (sd) : 38.2 (15.6)\n\n\nmin ≤ med ≤ max:\n\n\n18 ≤ 35 ≤ 68\n\n\nIQR (CV) : 25 (0.4)\n\n\n12 distinct values\n\n14 (100.0%)\n0 (0.0%)\n\n\n3\nsexo [character]\n\n\n1. H\n\n\n2. M\n\n\n\n\n8\n(\n57.1%\n)\n\n\n6\n(\n42.9%\n)\n\n\n\n14 (100.0%)\n0 (0.0%)\n\n\n4\npeso [numeric]\n\n\nMean (sd) : 70.9 (16.1)\n\n\nmin ≤ med ≤ max:\n\n\n51 ≤ 65 ≤ 109\n\n\nIQR (CV) : 17 (0.2)\n\n\n12 distinct values\n\n13 (92.9%)\n1 (7.1%)\n\n\n5\naltura [numeric]\n\n\nMean (sd) : 1.8 (0.1)\n\n\nmin ≤ med ≤ max:\n\n\n1.6 ≤ 1.8 ≤ 2\n\n\nIQR (CV) : 0.1 (0.1)\n\n\n14 distinct values\n\n14 (100.0%)\n0 (0.0%)\n\n\n6\ncolesterol [numeric]\n\n\nMean (sd) : 220.2 (39.8)\n\n\nmin ≤ med ≤ max:\n\n\n148 ≤ 210 ≤ 280\n\n\nIQR (CV) : 55 (0.2)\n\n\n13 distinct values\n\n13 (92.9%)\n1 (7.1%)\n\n\n\nGenerated by summarytools 1.1.4 (R version 4.3.3)2025-08-14\n\n\n\n\n\n\n\n\n\n\n\nCalcular el número de valores perdidos en cada variable.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\nskimr\n\n\n\nPara calcular el número de valores perdidos podemos usar la función colSums del paquete base de R, aplicada a la función is.na que devuelve un vector lógico indicando si cada elemento es NA o no.\nParámetros:\n\n\nx: matriz o data frame del que calcular el número de valores perdidos.\n\n\ncolSums(is.na(df))\n\n    nombre       edad       sexo       peso     altura colesterol \n         0          0          0          1          0          1 \n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. Para obtener un resumen de todas las variables del data frame, hay que indicar el argumento across(everything(), ...). En particular, para calcular el número de valores perdidos podemos aplicar la función sum al vector que devuelve la función is.na del paquete base de R.\n\ndf |&gt; summarise(across(everything(), ~ sum(is.na(.))))\n\n\n\n\nnombre\nedad\nsexo\npeso\naltura\ncolesterol\n\n\n0\n0\n0\n1\n0\n1\n\n\n\n\n\n\n\nPodemos obtener un resumen estadístico con la función skim del paquete skimr. El resumen incluye el número de valores perdidos para cada variable además de otros estadísticos.\nParámetros:\n\n\ndata: data frame del que obtener el resumen estadístico.\n\n\nlibrary(skimr)\nskim(df)\n\n\nData summary\n\n\nName\ndf\n\n\nNumber of rows\n14\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nnombre\n0\n1\n14\n31\n0\n14\n0\n\n\nsexo\n0\n1\n1\n1\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nedad\n0\n1.00\n38.21\n15.62\n18.00\n24.75\n35.00\n49.75\n68.00\n▇▅▃▅▂\n\n\npeso\n1\n0.93\n70.92\n16.13\n51.00\n61.00\n65.00\n78.00\n109.00\n▇▅▅▂▂\n\n\naltura\n0\n1.00\n1.77\n0.12\n1.58\n1.70\n1.75\n1.84\n1.98\n▆▇▆▃▃\n\n\ncolesterol\n1\n0.93\n220.23\n39.85\n148.00\n194.00\n210.00\n249.00\n280.00\n▂▇▂▅▅\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular el tamaño muestral según el sexo.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara calcular la frecuencia absoluta podemos usar la función table del paquete base de R.\n\ntable(df$sexo)\n\n\nH M \n8 6 \n\n\n\n\nPara calcular la frecuencia absoluta podemos usar la función count del paquete dplyr de tidyverse.\n\nlibrary(knitr)\nlibrary(dplyr)\ncount(df, sexo) |&gt; kable()\n\n\n\nsexo\nn\n\n\n\nH\n8\n\n\nM\n6\n\n\n\n\n\n\n\n\n\n\n\n\n\nCalcular la media y la desviación típica del nivel de colesterol sin tener en cuenta los datos perdidos.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\ntidyverse\n\n\n\nPara calcular la media y la desviación típica podemos usar las funciones mean y sd del paquete base de R. Es importante indicar el parámetro na.rm = TRUE para eliminar los valores perdidos antes de calcular la media y la desviación típica.\n\n# Media\nmean(df$colesterol, na.rm = TRUE)\n\n[1] 220.2308\n\n# Desviación típica:\nsd(df$colesterol, na.rm = TRUE)\n\n[1] 39.84795\n\n\n\n\nPodemos obtener un resumen estadístico con la función summarise del paquete dplyr de tidyverse. En particular, para calcular la media y la desviación típica hay que pasarle como argumento las funciones mean y sd del paquete base de R. Es importante indicar el parámetro na.rm = TRUE para eliminar los valores perdidos antes de calcular la media y la desviación típica.\n\nlibrary(dplyr)\ndf |&gt; summarise(media = mean(colesterol, na.rm = TRUE), \n                desviación_típica = sd(colesterol, na.rm = TRUE)) |&gt; \n    kable()\n\n\n\nmedia\ndesviación_típica\n\n\n220.2308\n39.84795\n\n\n\n\n\n\n\n\n\n\n\n\nRealizar un resumen estadístico de todas las variables que incluya la media, el mínimo, los cuartiles, el máximo y la desviación típica para las variables cuantitativas y la frecuencia absoluta para las variables cualitativas.\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nBase\nvtable\nskimr\nsummarytools\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar la función summary del paquete base de R.\nParámetros:\n\n\nobject: objeto del que obtener el resumen estadístico. Suele ser un data frame o un vector.\n\n\nsummary(df)\n\n    nombre               edad           sexo          \n Length:14          Min.   :18.00   Length:14         \n Class :character   1st Qu.:24.75   Class :character  \n Mode  :character   Median :35.00   Mode  :character  \n                    Mean   :38.21                     \n                    3rd Qu.:49.75                     \n                    Max.   :68.00                     \n\n      peso            altura        colesterol   \n Min.   : 51.00   Min.   :1.580   Min.   :148.0  \n 1st Qu.: 61.00   1st Qu.:1.705   1st Qu.:194.0  \n Median : 65.00   Median :1.755   Median :210.0  \n Mean   : 70.92   Mean   :1.769   Mean   :220.2  \n 3rd Qu.: 78.00   3rd Qu.:1.840   3rd Qu.:249.0  \n Max.   :109.00   Max.   :1.980   Max.   :280.0  \n NA's   :1                        NA's   :1      \n\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar la función st del paquete vtable.\nParámetros:\n\n\ndata: data frame del que obtener el resumen estadístico.\n\n\nlibrary(vtable)\nst(df)\n\n\nSummary Statistics\n\nVariable\nN\nMean\nStd. Dev.\nMin\nPctl. 25\nPctl. 75\nMax\n\n\n\nedad\n14\n38\n16\n18\n25\n50\n68\n\n\nsexo\n14\n\n\n\n\n\n\n\n\n... H\n8\n57%\n\n\n\n\n\n\n\n... M\n6\n43%\n\n\n\n\n\n\n\npeso\n13\n71\n16\n51\n61\n78\n109\n\n\naltura\n14\n1.8\n0.12\n1.6\n1.7\n1.8\n2\n\n\ncolesterol\n13\n220\n40\n148\n194\n249\n280\n\n\n\n\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar la función skim del paquete skimr.\nParámetros:\n\n\ndata: data frame del que obtener el resumen estadístico.\n\n\nskim(df)\n\n\nData summary\n\n\nName\ndf\n\n\nNumber of rows\n14\n\n\nNumber of columns\n6\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n2\n\n\nnumeric\n4\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\nnombre\n0\n1\n14\n31\n0\n14\n0\n\n\nsexo\n0\n1\n1\n1\n0\n2\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\nedad\n0\n1.00\n38.21\n15.62\n18.00\n24.75\n35.00\n49.75\n68.00\n▇▅▃▅▂\n\n\npeso\n1\n0.93\n70.92\n16.13\n51.00\n61.00\n65.00\n78.00\n109.00\n▇▅▅▂▂\n\n\naltura\n0\n1.00\n1.77\n0.12\n1.58\n1.70\n1.75\n1.84\n1.98\n▆▇▆▃▃\n\n\ncolesterol\n1\n0.93\n220.23\n39.85\n148.00\n194.00\n210.00\n249.00\n280.00\n▂▇▂▅▅\n\n\n\n\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar las funciones descr del paquete summarytools.\nParámetros:\n\n\nx: vector o data frame del que obtener el resumen estadístico. Por defecto calcula la media, la desviación típica, los cuartiles, el mínimo, el máximo, el rango intercuartílico, el coeficiente de variación, y los coeficientes de asimetría y apuntamiento.\n\n\ndescr(df) |&gt;\nkable()\n\n\n\n\naltura\ncolesterol\nedad\npeso\n\n\n\nMean\n1.7685714\n220.2307692\n38.2142857\n70.9230769\n\n\nStd.Dev\n0.1150155\n39.8479482\n15.6213787\n16.1269006\n\n\nMin\n1.5800000\n148.0000000\n18.0000000\n51.0000000\n\n\nQ1\n1.7000000\n194.0000000\n24.0000000\n61.0000000\n\n\nMedian\n1.7550000\n210.0000000\n35.0000000\n65.0000000\n\n\nQ3\n1.8500000\n249.0000000\n51.0000000\n78.0000000\n\n\nMax\n1.9800000\n280.0000000\n68.0000000\n109.0000000\n\n\nMAD\n0.1111950\n41.5128000\n17.7912000\n14.8260000\n\n\nIQR\n0.1350000\n55.0000000\n25.0000000\n17.0000000\n\n\nCV\n0.0650330\n0.1809372\n0.4087837\n0.2273858\n\n\nSkewness\n0.2052057\n-0.0022401\n0.3238511\n0.9149779\n\n\nSE.Skewness\n0.5973799\n0.6163361\n0.5973799\n0.6163361\n\n\nKurtosis\n-0.9852205\n-1.2502343\n-1.2886761\n-0.1208155\n\n\nN.Valid\n14.0000000\n13.0000000\n14.0000000\n13.0000000\n\n\nN\n14.0000000\n14.0000000\n14.0000000\n14.0000000\n\n\nPct.Valid\n100.0000000\n92.8571429\n100.0000000\n92.8571429\n\n\n\n\n\n\n\n\n\n\n\n\n\n¿En qué variable es más representativa la media?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nvtable\ntidyverse\ntidyverse 2\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar la función st del paquete vtable.\nParámetros:\n\n\ndata: data frame del que obtener el resumen estadístico.\n\nvars: vector de nombres de las variables a incluir en el resumen estadístico.\n\ngroup: nombre de la variable por la que agrupar los datos.\n\nsumm: vector de funciones a aplicar a las variables seleccionadas.\n\nsumm.names: vector de nombres para las funciones aplicadas.\n\n\nst(df, summ = c('mean(x, na.rm = TRUE)', 'sd(x, na.rm = TRUE)', 'sd(x, na.rm = TRUE)/mean(x, na.rm = TRUE)*100'),\nsumm.names = c(\"Media\", \"Desviación Típica\", \"Coef. Variación\"))\n\n\nSummary Statistics\n\nVariable\nMedia\nDesviación Típica\nCoef. Variación\n\n\n\nedad\n38\n16\n41\n\n\nsexo\n14\n\n\n\n\n... H\n8\n57%\n\n\n\n... M\n6\n43%\n\n\n\npeso\n71\n16\n23\n\n\naltura\n1.8\n0.12\n6.5\n\n\ncolesterol\n220\n40\n18\n\n\n\n\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar las funciones summarise y across del paquete dplyr de tidyverse.\nParámetros:\n\n\n.cols: Indica las columnas de las que se obtendrá el resúmen estadístico. Para seleccionar solo las variables numéricas hay que pasarel el argumento where(is.numeric).\n\n.fns: Indica el nombre y la función a aplicar. En este caso utilizaremos la media mean, desviación típica sd y el coeficiente de variación sd / abs(mean) * 100.\n\n\ndf |&gt; summarise(across(.cols = where(is.numeric), .fns = list(Media = ~ mean(.x, na.rm = TRUE), `Desviación Típica` = ~ sd(.x, na.rm = TRUE), `Coef. Variación` = ~ sd(.x, na.rm=TRUE) / mean(.x, na.rm=TRUE) * 100))) |&gt;\n    kable()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nedad_Media\nedad_Desviación Típica\nedad_Coef. Variación\npeso_Media\npeso_Desviación Típica\npeso_Coef. Variación\naltura_Media\naltura_Desviación Típica\naltura_Coef. Variación\ncolesterol_Media\ncolesterol_Desviación Típica\ncolesterol_Coef. Variación\n\n\n38.21429\n15.62138\n40.87837\n70.92308\n16.1269\n22.73858\n1.768571\n0.1150155\n6.503301\n220.2308\n39.84795\n18.09372\n\n\n\n\n\n\nPara obtener un resumen estadístico de todas las variables del conjunto de datos tenemos que encadenar las siguientes operaciones:\n\nSeleccionar las variables numéricas con la función select del paquete dplyr de tidyverse, pasándoloe el argumento where(is.numeric).\nPivotar el data frame con la función pivot_longer del paquete tidyr de tidyverse para pasarlo a formato largo.\nDividir el data frame por grupos con la función group_by del paquete dplyr de tidyverse.\nCalcular el resumen estadístico con la función summarise del paquete dplyr de tidyverse, aplicando las funciones mean, sd y la fórmula del coeficiente de variación.\n\n\n# Seleccionamos las variables numéricas.\ndf |&gt; select(where(is.numeric)) |&gt;\n    # Pivotamos el data frame a formato largo.\n    pivot_longer(everything(), names_to = \"Variable\", values_to = \"Valor\") |&gt;\n    # Agrupamos por variable.\n    group_by(Variable) |&gt;\n    # Calculamos la media, desviación típica y coeficiente de variación.\n    summarise(\"Media\" = mean(Valor, na.rm = TRUE), \n    \"Desviación Típica\" = sd(Valor, na.rm = TRUE),\n    \"Coef. Variación\" = sd(Valor, na.rm = T) / mean(Valor, na.rm = T) * 100) |&gt;\n    # Mostramos el resultado en una tabla.\n    kable()\n\n\n\nVariable\nMedia\nDesviación Típica\nCoef. Variación\n\n\n\naltura\n1.768571\n0.1150155\n6.503301\n\n\ncolesterol\n220.230769\n39.8479482\n18.093724\n\n\nedad\n38.214286\n15.6213787\n40.878374\n\n\npeso\n70.923077\n16.1269006\n22.738580\n\n\n\n\n\n\n\n\nLa variable con el coeficiente de variación más pequeño es la altura, por lo que es la que tiene la media más representativa.\n\n\n\n\n\nRealizar un resumen estadístico con el coeficiente de asimetría y el coeficiente de apuntamiento del peso y la estatura según el sexo. ¿Qué grupo tiene peso más normal, los hombres o las mujeres? ¿Y una estatura más normal?\n\n\n\n\n\n\nSolución\n\n\n\n\n\n\n\nvtable\ntidyverse\n\n\n\nPara obtener un resumen estadístico del conjunto de datos podemos usar la función st del paquete vtable.\nParámetros:\n\n\ndata: data frame del que obtener el resumen estadístico.\n\n\nvars: vector de nombres de las variables a incluir en el resumen estadístico.\n\ngroup: nombre de la variable por la que agrupar los datos.\n\nsumm: vector de funciones a aplicar a las variables seleccionadas.\n\nsumm.names: vector de nombres para las funciones aplicadas.\n\n\n\n\nlibrary(vtable)\nst(df, vars = c(\"peso\", \"altura\"), group = \"sexo\", summ = c('skewness(x, na.rm = TRUE)', 'kurtosis(x, na.rm = TRUE)'),\nsumm.names = c(\"Coef. Asimetría\", \"Coef. Apuntamiento\"))\n\n\nSummary Statistics\n\n\n\n\n\n\n\n\n\n\nsexo\n\n\nH\n\n\nM\n\n\n\nVariable\nCoef. Asimetría\nCoef. Apuntamiento\nCoef. Asimetría\nCoef. Apuntamiento\n\n\n\n\npeso\n0.61\n2.5\n-0.47\n1.9\n\n\naltura\n0.27\n1.9\n-0.07\n1.8\n\n\n\n\n\n\n\nPara obtener un resumen estadístico con el coeficiente de asimetría y el coeficiente de apuntamiento del peso y la estatura según el sexo tenemos que encadenar las siguientes operaciones:\n\nSeleccionar las variables deseadas con la función select del paquete dplyr de tidyverse.\nDividir el data frame por grupos según el sexo con la función group_by del paquete dplyr de tidyverse.\nCalcular el resumen estadístico con la función summarise del paquete dplyr de tidyverse, aplicando las funciones skewness y kurtosis del paquete moments.\n\n\nlibrary(moments)\n# Seleccionamos las variables peso y altura.\ndf |&gt; select(sexo, peso, altura) |&gt;\n# Agrupamos por sexo.\ngroup_by(sexo) |&gt;\n# Calculamos los coeficientes de asimetria y apuntamiento para cada grupo.\nsummarise(across(.cols = everything(), .fns = list(\"Coef. Asimetría\" = ~ skewness(.x, na.rm = TRUE), \"Coef. Apuntamiento\" = ~ kurtosis(.x, na.rm = TRUE)))) |&gt;\nkable()\n\n\n\n\n\n\n\n\n\n\nsexo\npeso_Coef. Asimetría\npeso_Coef. Apuntamiento\naltura_Coef. Asimetría\naltura_Coef. Apuntamiento\n\n\n\nH\n0.6107239\n2.508255\n0.2668417\n1.904435\n\n\nM\n-0.4661293\n1.852431\n-0.0699589\n1.756341\n\n\n\n\n\n\n\n\nLas mujeres tienen un peso más normal ya que tanto el coeficiente de asimetría como el de apuntamiento están más próximos a 0. Lo mismo ocurre con la altura.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estadística Descriptiva</span>"
    ]
  },
  {
    "objectID": "05-descriptiva.html#ejercicios-propuestos",
    "href": "05-descriptiva.html#ejercicios-propuestos",
    "title": "\n5  Estadística Descriptiva\n",
    "section": "\n5.2 Ejercicios propuestos",
    "text": "5.2 Ejercicios propuestos\n\nEjercicio 5.3 En un estudio se ha medido la tensión arterial de 25 individuos. Además se les ha preguntado si fuman y beben:\n\\[\n\\begin{array}{lccccccccccccc}\n\\hline\n\\mbox{Fumador}  & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} & \\mbox{sí} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{no} \\\\\n\\mbox{Bebedor} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} \\\\\n\\mbox{Tensión arterial} & 80 & 92 & 75 & 56 & 89 & 93 & 101 & 67 & 89 & 63 & 98 & 58 & 91 \\\\\n\\hline\n\\\\\n\\hline\n\\mbox{Fumador}  & \\mbox{sí} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} \\\\\n\\mbox{Bebedor} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} & \\mbox{no} & \\mbox{no} & \\mbox{sí} & \\mbox{sí} & \\mbox{sí} & \\mbox{no} & \\mbox{sí} & \\mbox{no} \\\\\n\\mbox{Tensión arterial} & 71 & 52 & 98 & 104 & 57 & 89 & 70 & 93 & 69 & 82 & 70 & 49 \\\\\n\\hline\n\\end{array}\n\\]\n\nCalcular la media aritmética, desviación típica, coeficiente de asimetría y curtosis de la tensión arterial de los fumadores y de los no fumadores. ¿Se puede considerar que las muestras provienen de una distribución normal?\nCalcular la media aritmética, desviación típica, coeficiente de asimetría y curtosis de la tensión arterial de los bebedores y de los no bebedores. ¿Se puede considerar que las muestras provienen de una distribución normal?\nCalcular la media aritmética, desviación típica, coeficiente de asimetría y curtosis de la tensión arterial de los grupos que se obtienen según el consumo de alcohol y tabaco. ¿Se puede considerar que las muestras provienen de una distribución normal?\n\n\n\nEjercicio 5.4 El conjunto de datos neonatos contiene información sobre una muestra de 320 recién nacidos en un hospital durante un año que cumplieron el tiempo normal de gestación.\n\nCalcular la media y la mediana muestral del peso de los nacidos e interpretarlos.\nCalcular el peso medio de los recién nacidos de la muestra según si la madre ha fumado o no durante el embarazo. Calcular también el peso medio de los recién nacidos de madres que no han fumado durante el embarazo, según si la madre fumaba o no antes del embarazo. ¿Qué conclusiones se pueden sacar?\n¿Cuál es la puntuación Apgar al minuto de nacer más frecuente?\nCalcular la media de la diferencia entre las puntuaciones Apgar a los 5 minutos y al minuto de nacer. ¿Cómo evolucionan los recién nacidos?\nCalcular los cuartiles muestrales del peso de los recién nacidos e interpretarlos.\nComparar los cuartiles muestrales del peso de los recién nacidos según el sexo.\n¿Por encima de qué peso estarán el 10% de los niños con mayor peso?\nSi se considera que un niño es atípico por bajo peso si se encuentra entre el 5% de los pesos más bajos, ¿por debajo de qué peso tiene que estar?\nCalcular el recorrido y el rango intercuartílico muestrales del peso de los recién nacidos e interpretarlos.\nCalcular la varianza y la desviación típica del peso de los recién nacidos e interpretarlos.\n¿En qué grupo hay más variabilidad del peso de los recién nacidos, en las madres fumadoras o en las madres no fumadoras durante el embarazo? ¿En qué grupo será más representativo el peso medio?\n¿Qué variable presenta más variabilidad relativa, el peso de los recién nacidos o el Apgar al minuto de nacer?\nCalcular el coeficiente de asimetría y de apuntamiento muestrales del peso de los recién nacidos e interpretarlos.\n¿Qué distribución es más asimétrica, la de los pesos de recién nacidos en madres mayores de 20 años o en madres menores de 20 años?\n¿Qué distribución es más apuntada, la del peso de los recién nacidos en hombres o en mujeres?\nDe acuerdo a la forma de la distribución, ¿puede considerarse la puntuación Apgar al minuto de nacer como una variable normal? ¿Y el número de cigarros fumados al día durante el embarazo?",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Estadística Descriptiva</span>"
    ]
  }
]