{
  "hash": "8cb8e905f993d0b76d9e9231253165f8",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Tipos y estructuras de datos\nlang: es\n---\n\nEsta práctica contiene ejercicios que muestran cómo trabajar con los tipos y estructuras de datos en R. En concreto, las estructuras de datos que se utilizan son\n\n- Vectores.\n- Factores.\n- Matrices.\n- Listas.\n- Dataframes.\n\n## Ejercicios Resueltos\n\nPara la realización de esta práctica se requieren los siguientes paquetes.\n\n```r\nlibrary(tidyverse) \n# Incluye los siguientes paquetes:\n# - readr: para la lectura de ficheros csv. \n# - dplyr: para el preprocesamiento y manipulación de datos.\nlibrary(knitr) # Para el formateo de tablas.\n```\n\n:::{#exr-vectores-1}\nRealizar las siguientes operaciones con vectores.\n\na.  Crear un vector con los números del 1 al 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Función c\n\n    La función `c()` permite combinar elementos en un vector. Los elementos se introducen separados por comas.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    numeros <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n    numeros\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1]  1  2  3  4  5  6  7  8  9 10\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## Operador :\n\n    El operador `inicio:fin` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    numeros <- 1:10\n    numeros\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1]  1  2  3  4  5  6  7  8  9 10\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Mostrar el número de elementos del vector anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    length(numeros)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 10\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un vector con los números pares del 1 al 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Función c\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    pares <- c(2, 4, 6, 8, 10)\n    pares\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  2  4  6  8 10\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## Función seq\n\n    La función `seq(inicio, fin, salto)` permite crear un vector con la secuencia de números enteros desde el número `inicio` hasta el número `fin` con un salto de `salto`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    pares <- seq(2, 10, by = 2)\n    pares\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  2  4  6  8 10\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Crear un vector con el cuadrado de los elementos del vector anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    El operador `^` permite elevar un número a otro. Cuando se aplica a un vector, eleva cada elemento del vector al número indicado.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    cuadrados <- pares^2\n    cuadrados\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]   4  16  36  64 100\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un vector con 5 números aleatorios entre 1 y 10.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    aleatorios <- sample(1:10, 5)\n    aleatorios\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 6 3 8 4 7\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un vector booleano con los números del vector anterior que son pares.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    El operador `%%` permite calcular el resto de la división entera de dos números. Si el resto es 0, el número es par. Y el operador `==` permite comparar dos vectores elemento a elemento.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    par <- aleatorios %% 2 == 0\n    par\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1]  TRUE FALSE  TRUE  TRUE FALSE\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un vector con 100 números aleatorios entre 0 y 1.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `runif(n, min, max)` permite generar `n` números aleatorios entre `min` y `max`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    aleatorios2 <- runif(100, 0, 1)\n    aleatorios2\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.1745409642 0.8289490622 0.3387814090 0.2167543538 0.1134076703\n      [6] 0.6286752101 0.0106526525 0.1093907864 0.4900617937 0.1743749664\n     [11] 0.6800843242 0.3646354883 0.6454122416 0.6526214175 0.9228122986\n     [16] 0.3606315583 0.9950923640 0.3035428333 0.3958196980 0.2882284960\n     [21] 0.2466872018 0.7218768313 0.6346673232 0.1410502058 0.8611289370\n     [26] 0.0003058636 0.3754426709 0.4195440877 0.8103933139 0.9372969284\n     [31] 0.7834821693 0.5671130815 0.3657950263 0.5821609648 0.1728922669\n     [36] 0.1561128458 0.5271299311 0.3742025893 0.0244430660 0.1007965880\n     [41] 0.3624238258 0.5429654324 0.7071530661 0.8355117675 0.5359205685\n     [46] 0.3299977432 0.8245965624 0.3711511579 0.3284018056 0.7122194655\n     [51] 0.7498793411 0.0470338808 0.0745800762 0.0610937241 0.8508216981\n     [56] 0.9843574974 0.5178964895 0.8918249931 0.3667059876 0.1444752673\n     [61] 0.3411170160 0.7664597644 0.4821867910 0.1529245593 0.7845511439\n     [66] 0.3426257242 0.2204916265 0.6151761415 0.7651914931 0.2320692504\n     [71] 0.4251030553 0.0818873062 0.2786484116 0.3453063101 0.4440597491\n     [76] 0.0636016356 0.8731953043 0.7871375214 0.6084885013 0.6492142531\n     [81] 0.6086444778 0.0130130642 0.2902684920 0.3225914293 0.1915048878\n     [86] 0.8669210437 0.3068271666 0.7916705245 0.4637930305 0.8580898261\n     [91] 0.8771222837 0.3976583821 0.5987865699 0.8512456813 0.5968641667\n     [96] 0.1862874334 0.9470176871 0.8725937384 0.8956902823 0.4447817269\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Ordenar el vector anterior de menor a mayor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sort(vector)` permite ordenar los elementos de un vector de menor a mayor.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    sort(aleatorios2)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.0003058636 0.0106526525 0.0130130642 0.0244430660 0.0470338808\n      [6] 0.0610937241 0.0636016356 0.0745800762 0.0818873062 0.1007965880\n     [11] 0.1093907864 0.1134076703 0.1410502058 0.1444752673 0.1529245593\n     [16] 0.1561128458 0.1728922669 0.1743749664 0.1745409642 0.1862874334\n     [21] 0.1915048878 0.2167543538 0.2204916265 0.2320692504 0.2466872018\n     [26] 0.2786484116 0.2882284960 0.2902684920 0.3035428333 0.3068271666\n     [31] 0.3225914293 0.3284018056 0.3299977432 0.3387814090 0.3411170160\n     [36] 0.3426257242 0.3453063101 0.3606315583 0.3624238258 0.3646354883\n     [41] 0.3657950263 0.3667059876 0.3711511579 0.3742025893 0.3754426709\n     [46] 0.3958196980 0.3976583821 0.4195440877 0.4251030553 0.4440597491\n     [51] 0.4447817269 0.4637930305 0.4821867910 0.4900617937 0.5178964895\n     [56] 0.5271299311 0.5359205685 0.5429654324 0.5671130815 0.5821609648\n     [61] 0.5968641667 0.5987865699 0.6084885013 0.6086444778 0.6151761415\n     [66] 0.6286752101 0.6346673232 0.6454122416 0.6492142531 0.6526214175\n     [71] 0.6800843242 0.7071530661 0.7122194655 0.7218768313 0.7498793411\n     [76] 0.7651914931 0.7664597644 0.7834821693 0.7845511439 0.7871375214\n     [81] 0.7916705245 0.8103933139 0.8245965624 0.8289490622 0.8355117675\n     [86] 0.8508216981 0.8512456813 0.8580898261 0.8611289370 0.8669210437\n     [91] 0.8725937384 0.8731953043 0.8771222837 0.8918249931 0.8956902823\n     [96] 0.9228122986 0.9372969284 0.9470176871 0.9843574974 0.9950923640\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Ordenar el vector anterior de mayor a menor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `sort(vector, decreasing = TRUE)` permite ordenar los elementos de un vector de mayor a menor.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    sort(aleatorios2, decreasing = TRUE)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n      [1] 0.9950923640 0.9843574974 0.9470176871 0.9372969284 0.9228122986\n      [6] 0.8956902823 0.8918249931 0.8771222837 0.8731953043 0.8725937384\n     [11] 0.8669210437 0.8611289370 0.8580898261 0.8512456813 0.8508216981\n     [16] 0.8355117675 0.8289490622 0.8245965624 0.8103933139 0.7916705245\n     [21] 0.7871375214 0.7845511439 0.7834821693 0.7664597644 0.7651914931\n     [26] 0.7498793411 0.7218768313 0.7122194655 0.7071530661 0.6800843242\n     [31] 0.6526214175 0.6492142531 0.6454122416 0.6346673232 0.6286752101\n     [36] 0.6151761415 0.6086444778 0.6084885013 0.5987865699 0.5968641667\n     [41] 0.5821609648 0.5671130815 0.5429654324 0.5359205685 0.5271299311\n     [46] 0.5178964895 0.4900617937 0.4821867910 0.4637930305 0.4447817269\n     [51] 0.4440597491 0.4251030553 0.4195440877 0.3976583821 0.3958196980\n     [56] 0.3754426709 0.3742025893 0.3711511579 0.3667059876 0.3657950263\n     [61] 0.3646354883 0.3624238258 0.3606315583 0.3453063101 0.3426257242\n     [66] 0.3411170160 0.3387814090 0.3299977432 0.3284018056 0.3225914293\n     [71] 0.3068271666 0.3035428333 0.2902684920 0.2882284960 0.2786484116\n     [76] 0.2466872018 0.2320692504 0.2204916265 0.2167543538 0.1915048878\n     [81] 0.1862874334 0.1745409642 0.1743749664 0.1728922669 0.1561128458\n     [86] 0.1529245593 0.1444752673 0.1410502058 0.1134076703 0.1093907864\n     [91] 0.1007965880 0.0818873062 0.0745800762 0.0636016356 0.0610937241\n     [96] 0.0470338808 0.0244430660 0.0130130642 0.0106526525 0.0003058636\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear un vector con los días laborables de la semana.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias_laborables <- c(\"Lunes\", \"Martes\", \"Miércoles\", \"Jueves\", \"Viernes\")\n    dias_laborables\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Añadir los días del fin de semana al vector anterior y guardar el resultado en una nueva variable.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias <- c(dias_laborables, \"Sábado\", \"Domingo\")\n    dias\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n    [6] \"Sábado\"    \"Domingo\"  \n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Acceder al tercer elemento del vector.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias_laborables[3]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Miércoles\"\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Seleccionar los días pares del vector.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Índices numéricos\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias[c(2, 4, 6)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## Índices numéricos negativos\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias[-c(1, 3, 5, 7)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## Índices lógicos\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    dias[c(FALSE, TRUE)]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Martes\" \"Jueves\" \"Sábado\"\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Concatenar los elementos del vector en una cadena de texto.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    La función `paste(vector, collapse = \" \")` permite concatenar los elementos de un vector en una cadena de texto separados por un espacio.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    paste(dias, collapse = \" \")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes Martes Miércoles Jueves Viernes Sábado Domingo\"\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Concatenar los elementos del vector en una cadena de texto separados por comas.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    semana <- paste(dias, collapse = \", \")\n    semana\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Lunes, Martes, Miércoles, Jueves, Viernes, Sábado, Domingo\"\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Dividir la cadena anterior en subcadenas usando como separador la coma.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    La función `strsplit(cadena, separador)` permite dividir una cadena de texto en subcadenas usando como separador el valor de `separador`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    strsplit(semana, \", \")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [[1]]\n    [1] \"Lunes\"     \"Martes\"    \"Miércoles\" \"Jueves\"    \"Viernes\"  \n    [6] \"Sábado\"    \"Domingo\"  \n    ```\n    \n    \n    :::\n    :::\n\n    :::\n:::\n\n:::{#exr-factores-1}\nSe ha tomado una muestra de alumnos de una clase y se ha recogido la información sobre el sexo de los alumnos obteniendo los siguientes datos:\n\n$$\n\\mbox{Mujer, Hombre, Mujer, Hombre, Mujer, Mujer, Hombre, Hombre}\n$$\n\na.  Crear un vector con los datos de la muestra.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    sexo <- c(\"Mujer\", \"Hombre\", \"Mujer\", \"Hombre\", \"Mujer\", \"Mujer\", \"Hombre\", \"Hombre\")\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Mujer\"  \"Hombre\" \"Mujer\"  \"Hombre\" \"Mujer\"  \"Mujer\"  \"Hombre\"\n    [8] \"Hombre\"\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Convertir el vector anterior en un factor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `factor(vector, labels)` permite convertir `vector` en un factor con los niveles o categorías especificados en `labels`. Si no se indica `labels`, los niveles se toman de los elementos del vector y se ordenan alfabéticamente.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    sexo <- factor(sexo)\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\n    Levels: Hombre Mujer\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Mostrar los niveles del factor.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `levels(factor)` permite mostrar los niveles del factor `factor`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    levels(sexo)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"Hombre\" \"Mujer\" \n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Reordenar los niveles del factor para que la categoría \"Mujer\" sea la primera.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    sexo <- factor(sexo, levels = c(\"Mujer\", \"Hombre\"))\n    sexo\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] Mujer  Hombre Mujer  Hombre Mujer  Mujer  Hombre Hombre\n    Levels: Mujer Hombre\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n:::\n\n:::{#exr-matrices-1}\nRealizar las siguientes operaciones con matrices.\n\na.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `matrix(vector, nrow, ncol)` permite crear una matriz con los datos de `vector` el número de filas indicado en `nrow` y el número de columnas indicado en `ncol`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    A <- matrix(1:4, nrow = 2, ncol = 2)\n    A\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    3\n    [2,]    2    4\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Añadir a la matriz anterior una nueva columna con los números del 5 y 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `cbind(matriz, vector)` permite añadir una nueva columna a la matriz `matriz` con los datos de `vector`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    A <- cbind(A, 5:6)\n    A\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2] [,3]\n    [1,]    1    3    5\n    [2,]    2    4    6\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear una matriz de 2 filas y 2 columnas con los números del 1 al 4, rellenando los elementos por filas.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `matrix` rellena los elementos de la matriz por columnas. Para rellenar los elementos por filas, se puede utilizar el parámetro opcional `byrow = TRUE`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    B <- matrix(1:4, nrow = 2, ncol = 2, byrow = TRUE)\n    B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear otra matriz a partir de la anterior añadiendo una fila con los números 5 y 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    B <- rbind(B, 5:6)\n    B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    [3,]    5    6\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Acceder al elemento de la segunda fila y la primera columna de la matriz anterior.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    B[2, 1]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 3\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Seleccionar la primera fila de la matriz.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    B[1, ]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 1 2\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Seleccionar la segunda columna de la matriz.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    B[, 2]\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 2 4 6\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Multiplicar la matriz A por la matriz B.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La multiplicación de matrices se realiza con el operador `%*%`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    A %*% B\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]   35   44\n    [2,]   44   56\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Calcular la transpuesta de la matriz A.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `t(matriz)` permite calcular la transpuesta de `matriz`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    t(A)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n         [,1] [,2]\n    [1,]    1    2\n    [2,]    3    4\n    [3,]    5    6\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n:::\n\n:::{#exr-listas-1}\nRealizar las siguientes operaciones con listas.\n\n\n\na.  Crear una lista con los siguientes con los datos del siguiente alumno:\n\n    - Nombre: Juan.\n    - Edad: 20 años.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para crear una lista se utiliza la función `list(nombre1 = valor1, nombre2 = valor2, ...)`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    alumno <- list(Nombre = \"Juan\", Edad = 20)\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Obtener la edad del alumno.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para acceder a los elementos de una lista se utiliza el operador `$`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    alumno$Edad\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 20\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Crear una lista con las siguientes notas del alumno:\n\n    - Matemáticas: 7.\n    - Química: 8.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    notas <- list(Matemáticas = 7, Química = 8)\n    notas\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Matemáticas\n    [1] 7\n    \n    $Química\n    [1] 8\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Añadir la lista de notas a la lista del alumno.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    alumno$Notas <- notas\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    \n    $Notas\n    $Notas$Matemáticas\n    [1] 7\n    \n    $Notas$Química\n    [1] 8\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Añadir a la lista anterior la nota del examen de Física, que ha sido un 6.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    alumno$Notas$Física <- 6\n    alumno\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    $Nombre\n    [1] \"Juan\"\n    \n    $Edad\n    [1] 20\n    \n    $Notas\n    $Notas$Matemáticas\n    [1] 7\n    \n    $Notas$Química\n    [1] 8\n    \n    $Notas$Física\n    [1] 6\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n:::\n\n:::{#exr-dataframes-1}\n\nLa siguiente tabla contiene los ingresos y gastos de una empresa durante el primer trimestre del año.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|Mes     | Ingresos| Gastos| Impuestos|\n|:-------|--------:|------:|---------:|\n|Enero   |    45000|  33400|      6450|\n|Febrero |    41500|  35400|      6300|\n|Marzo   |    51200|  35600|      7100|\n\n\n:::\n:::\n\n\na.  Crear un data frame con los datos de la tabla.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    Para crear un data frame se utiliza la función `data.frame(columna1 = vector1, columna2 = vector2, ...)`, donde `columna1`, `columna2`, ... son los nombres de las columnas y `vector1`, `vector2`, ... son los vectores con los datos de cada columna, que deben tener la misma longitud.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- data.frame(\n        Mes = c(\"Enero\", \"Febrero\", \"Marzo\"),\n        Ingresos = c(45000, 41500, 51200),\n        Gastos = c(33400, 35400, 35600)\n        )\n    df \n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos|\n    |:-------|--------:|------:|\n    |Enero   |    45000|  33400|\n    |Febrero |    41500|  35400|\n    |Marzo   |    51200|  35600|\n    \n    :::\n    :::\n\n    :::\n\na.  Añadir una nueva columna con los siguientes impuestos pagados.\n\n\n    ::: {.cell layout-align=\"center\"}\n    ::: {.cell-output-display}\n    \n    \n    |Mes     | Impuestos|\n    |:-------|---------:|\n    |Enero   |      6450|\n    |Febrero |      6300|\n    |Marzo   |      7100|\n    \n    \n    :::\n    :::\n\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    :::{.panel-tabset}\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df$Impuestos <- c(6450, 6300, 7100)\n    df\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos| Impuestos|\n    |:-------|--------:|------:|---------:|\n    |Enero   |    45000|  33400|      6450|\n    |Febrero |    41500|  35400|      6300|\n    |Marzo   |    51200|  35600|      7100|\n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con las funciones del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- df |> mutate(Impuestos = c(6450, 6300, 7100))\n    df\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos| Impuestos|\n    |:-------|--------:|------:|---------:|\n    |Enero   |    45000|  33400|      6450|\n    |Febrero |    41500|  35400|      6300|\n    |Marzo   |    51200|  35600|      7100|\n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Añadir una nueva fila con los siguientes datos de Abril. \n\n\n    ::: {.cell layout-align=\"center\"}\n    ::: {.cell-output-display}\n    \n    \n    |Mes   | Ingresos| Gastos| Impuestos|\n    |:-----|--------:|------:|---------:|\n    |Abril |    49700|  36300|      6850|\n    \n    \n    :::\n    :::\n\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    \n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- rbind(df, list(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850))\n    df\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos| Impuestos|\n    |:-------|--------:|------:|---------:|\n    |Enero   |    45000|  33400|      6450|\n    |Febrero |    41500|  35400|      6300|\n    |Marzo   |    51200|  35600|      7100|\n    |Abril   |    49700|  36300|      6850|\n    \n    :::\n    :::\n\n    \n    ## tidyverse\n    Con las funciones del paquete `dplyr` de `tidyverse`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    :::\n\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- df |> add_row(Mes = \"Abril\", Ingresos = 49700, Gastos = 36300, Impuestos = 6850)\n    df\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos| Impuestos|\n    |:-------|--------:|------:|---------:|\n    |Enero   |    45000|  33400|      6450|\n    |Febrero |    41500|  35400|      6300|\n    |Marzo   |    51200|  35600|      7100|\n    |Abril   |    49700|  36300|      6850|\n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Cambiar los ingresos de Marzo por 50400. \n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df[3, \"Ingresos\"] <- 50400\n    df\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |Mes     | Ingresos| Gastos| Impuestos|\n    |:-------|--------:|------:|---------:|\n    |Enero   |    45000|  33400|      6450|\n    |Febrero |    41500|  35400|      6300|\n    |Marzo   |    50400|  35600|      7100|\n    |Abril   |    49700|  36300|      6850|\n    \n    :::\n    :::\n\n    :::\n\na.  Guardar el data frame en un fichero csv.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n\n    La función `write.csv(dataframe, \"fichero.csv\")` permite guardar el data frame `dataframe` en el fichero `fichero.csv`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    write.csv(df, \"datos/ingresos_gastos.csv\", row.names = FALSE)\n    ```\n    :::\n\n    :::\n:::\n\n:::{#exr-dataframes-2}\nEl fichero [`colesterol.csv`](datos/colesterol.csv) contiene información de una muestra de pacientes donde se han medido la edad, el sexo, el peso, la altura y el nivel de colesterol, además de su nombre.\n\na.  Crear un data frame con los datos de todos los pacientes del estudio a partir del fichero [`colesterol.csv`](datos/colesterol.csv) y mostrar las primeras filas.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R. La función `read.csv(\"fichero.csv\")` permite leer un fichero csv y cargar los datos en un data frame. Y la función `head(dataframe)` permite mostrar las primeras filas del data frame `dataframe`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- read.csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    head(df)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre                       | edad|sexo | peso| altura| colesterol|\n    |:----------------------------|----:|:----|----:|------:|----------:|\n    |José Luis Martínez Izquierdo |   18|H    |   85|   1.79|        182|\n    |Rosa Díaz Díaz               |   32|M    |   65|   1.73|        232|\n    |Javier García Sánchez        |   24|H    |   NA|   1.81|        191|\n    |Carmen López Pinzón          |   35|M    |   65|   1.70|        200|\n    |Marisa López Collado         |   46|M    |   51|   1.58|        148|\n    |Antonio Ruiz Cruz            |   68|H    |   66|   1.74|        249|\n    \n    :::\n    :::\n\n    \n    ## tidyverse\n    Con la función [`read_csv`](https://readr.tidyverse.org/reference/read_delim.html) del paquete del paquete [`readr`](https://readr.tidyverse.org/index.html) de `tidyverse`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df <- read_csv(\"https://aprendeconalf.es/estadistica-practicas-r/datos/colesterol.csv\")\n    head(df)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre                       | edad|sexo | peso| altura| colesterol|\n    |:----------------------------|----:|:----|----:|------:|----------:|\n    |José Luis Martínez Izquierdo |   18|H    |   85|   1.79|        182|\n    |Rosa Díaz Díaz               |   32|M    |   65|   1.73|        232|\n    |Javier García Sánchez        |   24|H    |   NA|   1.81|        191|\n    |Carmen López Pinzón          |   35|M    |   65|   1.70|        200|\n    |Marisa López Collado         |   46|M    |   51|   1.58|        148|\n    |Antonio Ruiz Cruz            |   68|H    |   66|   1.74|        249|\n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Mostrar las variables del data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    colnames(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] \"nombre\"     \"edad\"       \"sexo\"       \"peso\"       \"altura\"    \n    [6] \"colesterol\"\n    ```\n    \n    \n    :::\n    :::\n\n    \n    ## tidyverse\n    Con la función [`glimpse`](https://dplyr.tidyverse.org/reference/glimpse.html?q=read_csv#undefined) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`. Esta función muestra las columnas del data frame en filas, de manera que permite ver todas las columnas de un data frame cuando este tiene muchas columnas.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    glimpse(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Rows: 14\n    Columns: 6\n    $ nombre     <chr> \"José Luis Martínez Izquierdo\", \"Rosa Díaz Díaz\",~\n    $ edad       <dbl> 18, 32, 24, 35, 46, 68, 51, 22, 35, 46, 53, 58, 2~\n    $ sexo       <chr> \"H\", \"M\", \"H\", \"M\", \"M\", \"H\", \"H\", \"M\", \"H\", \"H\",~\n    $ peso       <dbl> 85, 65, NA, 65, 51, 66, 62, 60, 90, 75, 55, 78, 1~\n    $ altura     <dbl> 1.79, 1.73, 1.81, 1.70, 1.58, 1.74, 1.72, 1.66, 1~\n    $ colesterol <dbl> 182, 232, 191, 200, 148, 249, 276, NA, 241, 280, ~\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Mostrar el número de filas del data frame, que corresponde al número de pacientes.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    \n    La función `nrow(dataframe)` permite mostrar el número de filas del data frame `dataframe`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    nrow(df)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] 14\n    ```\n    \n    \n    :::\n    :::\n\n    :::\n\na.  Mostrar 5 filas aleatorias del data frame.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n\n    La función `sample(vector, n)` permite seleccionar `n` elementos aleatorios de `vector`. El muestreo es sin reemplazamiento.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df[sample(nrow(df), 5), ]\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre                          | edad|sexo | peso| altura| colesterol|\n    |:-------------------------------|----:|:----|----:|------:|----------:|\n    |Miguel Angel Cuadrado Gutiérrez |   27|H    |  109|   1.98|        210|\n    |José María de la Guía Sanz      |   58|H    |   78|   1.87|        198|\n    |Antonio Fernández Ocaña         |   51|H    |   62|   1.72|        276|\n    |Macarena Álvarez Luna           |   53|M    |   55|   1.62|        262|\n    |Carmen López Pinzón             |   35|M    |   65|   1.70|        200|\n    \n    :::\n    :::\n\n\n    ## tidyverse\n\n    La función `sample_n(dataframe, n)` del paquete `dplyr` de `tidyverse` permite seleccionar `n` filas aleatorias del data frame `dataframe`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df |> sample_n(5)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre                  | edad|sexo | peso| altura| colesterol|\n    |:-----------------------|----:|:----|----:|------:|----------:|\n    |Marisa López Collado    |   46|M    |   51|   1.58|        148|\n    |Antonio Fernández Ocaña |   51|H    |   62|   1.72|        276|\n    |Antonio Ruiz Cruz       |   68|H    |   66|   1.74|        249|\n    |Carmen López Pinzón     |   35|M    |   65|   1.70|        200|\n    |Javier García Sánchez   |   24|H    |   NA|   1.81|        191|\n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Obtener los datos de colesterol de los pacientes.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df$colesterol\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n     [1] 182 232 191 200 148 249 276  NA 241 280 262 198 210 194\n    ```\n    \n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función [`select`](https://dplyr.tidyverse.org/reference/select.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df |> select(colesterol)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    | colesterol|\n    |----------:|\n    |        182|\n    |        232|\n    |        191|\n    |        200|\n    |        148|\n    |        249|\n    |        276|\n    |         NA|\n    |        241|\n    |        280|\n    |        262|\n    |        198|\n    |        210|\n    |        194|\n    \n    :::\n    :::\n\n    :::\n    :::\n\na.  Obtener los datos del quinto paciente.\n\n    :::{.callout-tip collapse=\"true\"}\n    ## Solución\n    :::{.panel-tabset}\n\n    ## Base\n    Con las funciones del paquete `base` de R.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df[5, ]\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre               | edad|sexo | peso| altura| colesterol|\n    |:--------------------|----:|:----|----:|------:|----------:|\n    |Marisa López Collado |   46|M    |   51|   1.58|        148|\n    \n    :::\n    :::\n\n\n    ## tidyverse\n    Con la función [`slice`](https://dplyr.tidyverse.org/reference/slice.html) del paquete [`dplyr`](https://dplyr.tidyverse.org/index.html) de `tidyverse`.\n\n\n    ::: {.cell layout-align=\"center\"}\n    \n    ```{.r .cell-code}\n    df |> slice(5)\n    ```\n    \n    ::: {.cell-output-display}\n    \n    |nombre               | edad|sexo | peso| altura| colesterol|\n    |:--------------------|----:|:----|----:|------:|----------:|\n    |Marisa López Collado |   46|M    |   51|   1.58|        148|\n    \n    :::\n    :::\n\n    :::\n    :::\n:::\n\n## Ejercicios Propuestos\n\n:::{#exr-vectores-2}\nLa siguiente tabla contiene las notas de un grupo de alumnos en dos asignaturas.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n\n\n|Alumno |Grupo | Física| Química|\n|:------|:-----|------:|-------:|\n|Juan   |A     |    7.0|     6.7|\n|María  |B     |    3.5|     5.0|\n|Pedro  |B     |    6.0|     7.1|\n|Ana    |A     |    5.2|     4.5|\n|Luis   |A     |    4.5|      NA|\n|Sara   |B     |    9.0|     9.2|\n\n\n:::\n:::\n\n\na.  Crear un vector con los nombres de los alumnos.\n\na.  Crear un factor el grupo.\n\na.  Crear un vector con las notas de Física y otro con las notas de Química.\n\na.  Crear un vector con la nota media de las dos asignaturas.\n\na.  Crear un vector booleano con los alumnos que han aprobado el curso. Para aprobar el curso, la nota media de las dos asignaturas debe ser mayor o igual a 5.\n\na.  Crear un vector con los nombres de los alumnos que han aprobado el curso.\n\na.  Crear un data frame con los nombres de los alumnos, sus notas y su media reutilizando los vectores anteriores.\n\na.  Guardar el data frame en un fichero csv.\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}